
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039ec  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08003b98  08003b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb0  08003cb0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cb0  08003cb0  00013cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cb8  08003cb8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cbc  08003cbc  00013cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000d5b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000f4b3  00000000  00000000  0002d5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d22  00000000  00000000  0003caa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b88  00000000  00000000  0003e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d9a82  00000000  00000000  0003f350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000ad0  00000000  00000000  00118dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00023b61  00000000  00000000  001198a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d409  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030b4  00000000  00000000  0013d45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003b80 	.word	0x08003b80

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003b80 	.word	0x08003b80

080001ec <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001ec:	df00      	svc	0
        bx lr
 80001ee:	4770      	bx	lr

080001f0 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f0:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f2:	4770      	bx	lr

080001f4 <asm_zeros>:
@
@ Valor de retorno: ---

.thumb_func
    asm_zeros:
    	mov r2,#0
 80001f4:	f04f 0200 	mov.w	r2, #0

080001f8 <_for_zeros>:
     _for_zeros:
    	str r2, [r0],#4		@pone el contenido de r2 en *r1 y aumenta en 4 r0 por ser de 32 bits
 80001f8:	f840 2b04 	str.w	r2, [r0], #4
		subs r1,#1			@resta 1 a r1 que se corresponde con longitud y actualiza flags
 80001fc:	3901      	subs	r1, #1
		bne _for_zeros		@vuele al for si longitud no llega a cero
 80001fe:	d1fb      	bne.n	80001f8 <_for_zeros>

        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 8000200:	4770      	bx	lr

08000202 <asm_productoEscalar32>:
@
@ Valor de retorno: ---

.thumb_func
    asm_productoEscalar32:
    push {r4}
 8000202:	b410      	push	{r4}

08000204 <_for_prodEsc32>:
     _for_prodEsc32:

     	ldr r4,[r0],#4		@carga el contenido de vectorIn en r4 y aumenta la dirección de r0 en 4 bytes
 8000204:	f850 4b04 	ldr.w	r4, [r0], #4
     	mul r4,r4,r3		@r4=r4*r3, r3 es el escalar
 8000208:	fb04 f403 	mul.w	r4, r4, r3
    	str r4, [r1],#4		@pone el contenido de r4 en *r1 y aumenta en 4 r0 por ser de 32 bits
 800020c:	f841 4b04 	str.w	r4, [r1], #4

		subs r2,#1
 8000210:	3a01      	subs	r2, #1
		bne _for_prodEsc32		@vuele al for si longitud no llega a cero
 8000212:	d1f7      	bne.n	8000204 <_for_prodEsc32>

	pop {r4}
 8000214:	bc10      	pop	{r4}
    bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 8000216:	4770      	bx	lr

08000218 <asm_productoEscalar16>:
@
@ Valor de retorno: ---

.thumb_func
    asm_productoEscalar16:
    push {r4}
 8000218:	b410      	push	{r4}

0800021a <_for_prodEsc16>:
     _for_prodEsc16:

     	ldrh r4,[r0],#2		@carga el contenido de vectorIn en r4 (media palabra)y aumenta la dirección de r0 en 2 bytes
 800021a:	f830 4b02 	ldrh.w	r4, [r0], #2
     	mul r4,r4,r3		@r4=r4*r3, r3 es el escalar
 800021e:	fb04 f403 	mul.w	r4, r4, r3
    	strh r4, [r1],#2		@pone el contenido de r4 en *r1 y aumenta en 2 r0 por ser de 16 bits
 8000222:	f821 4b02 	strh.w	r4, [r1], #2

		subs r2,#1
 8000226:	3a01      	subs	r2, #1
		bne _for_prodEsc16		@vuele al for si longitud no llega a cero
 8000228:	d1f7      	bne.n	800021a <_for_prodEsc16>

	pop {r4}
 800022a:	bc10      	pop	{r4}
    bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 800022c:	4770      	bx	lr

0800022e <asm_productoEscalar12>:
@
@ Valor de retorno: ---

.thumb_func
    asm_productoEscalar12:
    push {r4}
 800022e:	b410      	push	{r4}

08000230 <_for_prodEsc12>:
     _for_prodEsc12:

     	ldrh r4,[r0],#2		@carga el contenido de vectorIn en r4 (media palabra)y aumenta la dirección de r0 en 2 bytes
 8000230:	f830 4b02 	ldrh.w	r4, [r0], #2
     	mul r4,r4,r3		@r4=r4*r3, r3 es el escalar
 8000234:	fb04 f403 	mul.w	r4, r4, r3
     	usat r4,#12,r4		@saturo el valor de r4 en 12 bits y lo vuelvo a almacenar en r4
 8000238:	f384 040c 	usat	r4, #12, r4
    	strh r4, [r1],#2		@pone el contenido de r4 en *r1 y aumenta en 2 r0 por ser de 16 bits
 800023c:	f821 4b02 	strh.w	r4, [r1], #2

		subs r2,#1
 8000240:	3a01      	subs	r2, #1
		bne _for_prodEsc12		@vuele al for si longitud no llega a cero
 8000242:	d1f5      	bne.n	8000230 <_for_prodEsc12>

	pop {r4}
 8000244:	bc10      	pop	{r4}
    bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 8000246:	4770      	bx	lr

08000248 <asm_filtroVentana10>:
@
@ Valor de retorno: ---

.thumb_func
    asm_filtroVentana10:
    push {r4-r9}
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    mov r3,#0				@analogo a lo utilizado como i
 800024c:	f04f 0300 	mov.w	r3, #0

08000250 <_for_filtroVentana>:
     _for_filtroVentana:

		mov r4,#0					@analogo a lo utilizado como temp
 8000250:	f04f 0400 	mov.w	r4, #0
    	mov r5,#0					@analogo a lo utilizado como windowStart
 8000254:	f04f 0500 	mov.w	r5, #0
    	add r6,r3,HALF_WINDOW		@analogo a lo utilizado como windowEnd r6 = r3 + HALF_WINDOW
 8000258:	f103 0605 	add.w	r6, r3, #5
    	add r6,#1					@para una correcta delimitación
 800025c:	f106 0601 	add.w	r6, r6, #1

    	cmp r3,HALF_WINDOW
 8000260:	2b05      	cmp	r3, #5
    	bls _i_less_halfWindow		@si es menor o igual salta y no ejecuta la asignación a continuación
 8000262:	d901      	bls.n	8000268 <_i_less_halfWindow>
    	sub r5,r3,HALF_WINDOW		@reemplaza a windowStart = i-HALF_WINDOW;
 8000264:	f1a3 0505 	sub.w	r5, r3, #5

08000268 <_i_less_halfWindow>:

    	_i_less_halfWindow:

    	cmp r6,r2
 8000268:	4296      	cmp	r6, r2
    	bls _window_end_less_long	@si es menor o igual salta (lower same unsigned)
 800026a:	d900      	bls.n	800026e <_window_end_less_long>
    	mov r6,r2					@ analogo a windowEnd = longitudVectorIn;
 800026c:	4616      	mov	r6, r2

0800026e <_window_end_less_long>:

    	_window_end_less_long:		@salta asignación
    	mov r7,r5;					@j=windowStart
 800026e:	462f      	mov	r7, r5

08000270 <_for_j_temp>:

    	_for_j_temp:

    	ldrh r8,[r0,r7,LSL 1]		@ carga el contenido de la dirección r0 agregando como offset el valor de r7 con un shift
 8000270:	f830 8017 	ldrh.w	r8, [r0, r7, lsl #1]
    								@ en una posición (multiplicado por 2) por ser elementos de 16 bits
    	add r4,r8					@temp += vectorIn[i]
 8000274:	4444      	add	r4, r8
    	add r7,#1					@j++;
 8000276:	f107 0701 	add.w	r7, r7, #1
    	cmp r7,r6
 800027a:	42b7      	cmp	r7, r6
    	blt _for_j_temp				@si j<=windowEnd vuelve a ejecutar el for (solo es less than porque se incrementó antes)
 800027c:	dbf8      	blt.n	8000270 <_for_j_temp>


		mov r9,#0					@a esta altura ya se tiene el resultado final sin dividir en r4
 800027e:	f04f 0900 	mov.w	r9, #0

08000282 <div_loop>:
		div_loop:
    	subs r4,r4,#WINDOW_SIZE
 8000282:	3c0b      	subs	r4, #11
    	bmi _end_div_loop			@si el resultado de la resta es negativo termina el loop
 8000284:	d402      	bmi.n	800028c <_end_div_loop>
    	add r9,#1					@agrega 1 al resultado si la resta es positiva
 8000286:	f109 0901 	add.w	r9, r9, #1
    								@ es una manera iterativa extremadamente lenta
    	b div_loop
 800028a:	e7fa      	b.n	8000282 <div_loop>

0800028c <_end_div_loop>:


		_end_div_loop:

    	strh r9,[r1],#2				@almaceno el valor de 16 bits en vector out y aumento 2 bytes su direccion
 800028c:	f821 9b02 	strh.w	r9, [r1], #2

		add r3,#1					@i++
 8000290:	f103 0301 	add.w	r3, r3, #1
		cmp r3,r2
 8000294:	4293      	cmp	r3, r2
		blt _for_filtroVentana		@si j<=windowEnd vuelve a ejecutar el for (solo less than  por lo mismo que lo anterior)
 8000296:	dbdb      	blt.n	8000250 <_for_filtroVentana>


	pop {r4-r9}
 8000298:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 800029c:	4770      	bx	lr

0800029e <asm_pack32to16>:

.thumb_func
    asm_pack32to16:
     _for_pack:

     ldr r3,[r0],4		@obtengo el valor de vectIn
 800029e:	f850 3b04 	ldr.w	r3, [r0], #4
     lsr r3,16			@shift 16 bits a la derecha para ontener los mas significativos
 80002a2:	ea4f 4313 	mov.w	r3, r3, lsr #16
     strh r3,[r1],2	@se guarda solamente media palabra
 80002a6:	f821 3b02 	strh.w	r3, [r1], #2
     subs r2,#1			@se disminuye en 1 longitud para controlar el ciclo
 80002aa:	3a01      	subs	r2, #1
     bne _for_pack		@si es igual a cero hay que salir del lazo
 80002ac:	d1f7      	bne.n	800029e <asm_pack32to16>


    bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80002ae:	4770      	bx	lr

080002b0 <asm_max>:
@ Valor de retorno: r0 indice de valor máximo

.thumb_func
    asm_max:

    push {r4}
 80002b0:	b410      	push	{r4}

	sub r1,#1				@para usarlo directamente como indice
 80002b2:	f1a1 0101 	sub.w	r1, r1, #1

	ldr r2,[r0,r1,lsl 2]	@cargo lo que está en la ultima posición y lo multiplico por 4 por ser 4 bytes
 80002b6:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
							@r2 se va a usar para mantener el valor máximo

	mov r3,r1				@r3 se va a usar para guardar el indice del valor máximo
 80002ba:	460b      	mov	r3, r1

080002bc <_for_max>:

     _for_max:

	 subs r1,#1
 80002bc:	3901      	subs	r1, #1
	 bmi end_max_loop			@si el resultado es negativo significa que ya se recorrio el array completo
 80002be:	d406      	bmi.n	80002ce <end_max_loop>

     ldr r4,[r0,r1,lsl 2]		@obtengo el valor de vectIn
 80002c0:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
     cmp r4,r2
 80002c4:	4294      	cmp	r4, r2
     blt _not_greater			@en caso de que r4 no sea mayor se salta la parte de asignación
 80002c6:	db01      	blt.n	80002cc <_not_greater>

     mov r2,r4					@asigno nuevo cvalor maximo
 80002c8:	4622      	mov	r2, r4
     mov r3,r1					@asigno nuevo indice
 80002ca:	460b      	mov	r3, r1

080002cc <_not_greater>:

	_not_greater:
     b _for_max					@si es igual a cero hay que salir del lazo
 80002cc:	e7f6      	b.n	80002bc <_for_max>

080002ce <end_max_loop>:

     end_max_loop:

     mov r0,r3			@asigno a r0 el valor de retorno (indice del mayor)
 80002ce:	4618      	mov	r0, r3

     pop {r4}
 80002d0:	bc10      	pop	{r4}


    bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80002d2:	4770      	bx	lr

080002d4 <asm_downsampleM>:
@ Valor de retorno: -

.thumb_func
    asm_downsampleM:

    push {r4-r7}
 80002d4:	b4f0      	push	{r4, r5, r6, r7}

	mov r4,#0	@r4 representa la variable sampleCounter
 80002d6:	f04f 0400 	mov.w	r4, #0
	mov r5,#0	@r5 representa la variable currentInSample
 80002da:	f04f 0500 	mov.w	r5, #0
	mov r6,#0	@r6 representa la variable currentOutSample
 80002de:	f04f 0600 	mov.w	r6, #0

				@r7 va a ser el contenido en la dirrecion actual del vector de entrada
				@r8 va a ser el contenido en la dirrecion actual del vector de salida

	sub r3,#1	@utilizado en el condicional del if
 80002e2:	f1a3 0301 	sub.w	r3, r3, #1

080002e6 <_downsample_loop>:

	_downsample_loop:

		cmp r4,r3
 80002e6:	429c      	cmp	r4, r3
		bne _comp_downsample_not_equal
 80002e8:	d103      	bne.n	80002f2 <_comp_downsample_not_equal>
		mov r4,#0
 80002ea:	f04f 0400 	mov.w	r4, #0
		add r5,#1			@salteo de posición de 32 bits
 80002ee:	f105 0501 	add.w	r5, r5, #1

080002f2 <_comp_downsample_not_equal>:

		_comp_downsample_not_equal:

		@acá va la asignación

		ldr r7,[r0,r5,lsl 2]		@cargo valor actual del vector de entrada
 80002f2:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
		str r7,[r1,r6,lsl 2]		@lo asigno a la posición actual del vector de salida
 80002f6:	f841 7026 	str.w	r7, [r1, r6, lsl #2]

		add r4,#1			@aumento sampleCounter
 80002fa:	f104 0401 	add.w	r4, r4, #1
		add r5,#1			@aumento currentInSample
 80002fe:	f105 0501 	add.w	r5, r5, #1
		add r6,#1			@aumento currentOutSample
 8000302:	f106 0601 	add.w	r6, r6, #1

		cmp r5,r2
 8000306:	4295      	cmp	r5, r2
		blo _downsample_loop
 8000308:	d3ed      	bcc.n	80002e6 <_downsample_loop>


	pop {r4-r7}
 800030a:	bcf0      	pop	{r4, r5, r6, r7}
    bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 800030c:	4770      	bx	lr

0800030e <asm_invertir>:
@ Valor de retorno: -

.thumb_func
    asm_invertir:

    push {r4-r6}
 800030e:	b470      	push	{r4, r5, r6}

    mov r2,#0	@ utilizado como temp
 8000310:	f04f 0200 	mov.w	r2, #0

    mov r3,r1
 8000314:	460b      	mov	r3, r1
    lsr r3,1		@para utilizarlo al igual que la variable flipTimes
 8000316:	ea4f 0353 	mov.w	r3, r3, lsr #1

0800031a <_invertir_loop>:

    _invertir_loop:

    sub r4,r3,#1			@utilizarlo para indexar a flipTimes -1
 800031a:	f1a3 0401 	sub.w	r4, r3, #1
    ldrh r2,[r0,r4,lsl #1]	@valores de 16 bits
 800031e:	f830 2014 	ldrh.w	r2, [r0, r4, lsl #1]

    sub r5,r1,r3			@utilizado para indexar a longitud-flipTimes
 8000322:	eba1 0503 	sub.w	r5, r1, r3
    ldrh r6,[r0,r5,lsl #1]
 8000326:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]

    strh r6,[r0,r4,lsl #1]	@guardo el contenido de longitud-flipTimes en flipTimes-1
 800032a:	f820 6014 	strh.w	r6, [r0, r4, lsl #1]
    strh r2,[r0,r5,lsl #1]	@guardo el contenido de flipTimes-1  en longitud-flipTimes
 800032e:	f820 2015 	strh.w	r2, [r0, r5, lsl #1]

    subs r3,#1
 8000332:	3b01      	subs	r3, #1

    bne _invertir_loop 		@mientras que flipTimes sea mayor a cero sigo ejecutando
 8000334:	d1f1      	bne.n	800031a <_invertir_loop>

	pop {r4-r6}
 8000336:	bc70      	pop	{r4, r5, r6}

    bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 8000338:	4770      	bx	lr

0800033a <asm_addEcoVector>:

.thumb_func

    asm_addEcoVector:

    push {r4-r6}			@r5 tendrá el valor en 0 del array
 800033a:	b470      	push	{r4, r5, r6}
    						@r6 tendrá el valor con offset en 882 muestras

	mov r3,#0				@r3 analogo a i
 800033c:	f04f 0300 	mov.w	r3, #0
	mov r4,r2				@cargo en r4 882
 8000340:	4614      	mov	r4, r2

08000342 <_for_eco_loop>:

     _for_eco_loop:

     	ldrsh r5,[r0,r3,lsl #1]	@cargo lo que está en la posición i y lo multiplico por 2 por ser datos de 16 bits
 8000342:	f930 5013 	ldrsh.w	r5, [r0, r3, lsl #1]
								@r2 se va a usar para mantener el valor de delay

		ldrsh r6,[r0,r4,lsl #1]	@cargo lo que está en la posición 882+i y lo multiplico por 2 por ser datos de 16 bits
 8000346:	f930 6014 	ldrsh.w	r6, [r0, r4, lsl #1]
								@r2 se va a usar para mantener el valor de delay

		add r6,r6,r5,asr #1		@equivalente a N1 = N1 + N2>>1
 800034a:	eb06 0665 	add.w	r6, r6, r5, asr #1
		ssat r6,16,r6
 800034e:	f306 060f 	ssat	r6, #16, r6

		strh r6,[r0,r4,lsl 1]  	@guardo resultado en 882+i y lo multiplico por 2 por ser datos de 16 bits
 8000352:	f820 6014 	strh.w	r6, [r0, r4, lsl #1]

		add r3,#1
 8000356:	f103 0301 	add.w	r3, r3, #1
		add r4,#1
 800035a:	f104 0401 	add.w	r4, r4, #1

		cmp r4,r1
 800035e:	428c      	cmp	r4, r1

	 bne _for_eco_loop			@si son diferentes longitud e i sigo con el lazo
 8000360:	d1ef      	bne.n	8000342 <_for_eco_loop>

     pop {r4-r6}
 8000362:	bc70      	pop	{r4, r5, r6}


    bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 8000364:	4770      	bx	lr
	...

08000368 <__aeabi_uldivmod>:
 8000368:	b953      	cbnz	r3, 8000380 <__aeabi_uldivmod+0x18>
 800036a:	b94a      	cbnz	r2, 8000380 <__aeabi_uldivmod+0x18>
 800036c:	2900      	cmp	r1, #0
 800036e:	bf08      	it	eq
 8000370:	2800      	cmpeq	r0, #0
 8000372:	bf1c      	itt	ne
 8000374:	f04f 31ff 	movne.w	r1, #4294967295
 8000378:	f04f 30ff 	movne.w	r0, #4294967295
 800037c:	f000 b974 	b.w	8000668 <__aeabi_idiv0>
 8000380:	f1ad 0c08 	sub.w	ip, sp, #8
 8000384:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000388:	f000 f806 	bl	8000398 <__udivmoddi4>
 800038c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000394:	b004      	add	sp, #16
 8000396:	4770      	bx	lr

08000398 <__udivmoddi4>:
 8000398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800039c:	9d08      	ldr	r5, [sp, #32]
 800039e:	4604      	mov	r4, r0
 80003a0:	468e      	mov	lr, r1
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d14d      	bne.n	8000442 <__udivmoddi4+0xaa>
 80003a6:	428a      	cmp	r2, r1
 80003a8:	4694      	mov	ip, r2
 80003aa:	d969      	bls.n	8000480 <__udivmoddi4+0xe8>
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	b152      	cbz	r2, 80003c8 <__udivmoddi4+0x30>
 80003b2:	fa01 f302 	lsl.w	r3, r1, r2
 80003b6:	f1c2 0120 	rsb	r1, r2, #32
 80003ba:	fa20 f101 	lsr.w	r1, r0, r1
 80003be:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c2:	ea41 0e03 	orr.w	lr, r1, r3
 80003c6:	4094      	lsls	r4, r2
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	0c21      	lsrs	r1, r4, #16
 80003ce:	fbbe f6f8 	udiv	r6, lr, r8
 80003d2:	fa1f f78c 	uxth.w	r7, ip
 80003d6:	fb08 e316 	mls	r3, r8, r6, lr
 80003da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003de:	fb06 f107 	mul.w	r1, r6, r7
 80003e2:	4299      	cmp	r1, r3
 80003e4:	d90a      	bls.n	80003fc <__udivmoddi4+0x64>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f106 30ff 	add.w	r0, r6, #4294967295
 80003ee:	f080 811f 	bcs.w	8000630 <__udivmoddi4+0x298>
 80003f2:	4299      	cmp	r1, r3
 80003f4:	f240 811c 	bls.w	8000630 <__udivmoddi4+0x298>
 80003f8:	3e02      	subs	r6, #2
 80003fa:	4463      	add	r3, ip
 80003fc:	1a5b      	subs	r3, r3, r1
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb3 f0f8 	udiv	r0, r3, r8
 8000404:	fb08 3310 	mls	r3, r8, r0, r3
 8000408:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800040c:	fb00 f707 	mul.w	r7, r0, r7
 8000410:	42a7      	cmp	r7, r4
 8000412:	d90a      	bls.n	800042a <__udivmoddi4+0x92>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 33ff 	add.w	r3, r0, #4294967295
 800041c:	f080 810a 	bcs.w	8000634 <__udivmoddi4+0x29c>
 8000420:	42a7      	cmp	r7, r4
 8000422:	f240 8107 	bls.w	8000634 <__udivmoddi4+0x29c>
 8000426:	4464      	add	r4, ip
 8000428:	3802      	subs	r0, #2
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	1be4      	subs	r4, r4, r7
 8000430:	2600      	movs	r6, #0
 8000432:	b11d      	cbz	r5, 800043c <__udivmoddi4+0xa4>
 8000434:	40d4      	lsrs	r4, r2
 8000436:	2300      	movs	r3, #0
 8000438:	e9c5 4300 	strd	r4, r3, [r5]
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	428b      	cmp	r3, r1
 8000444:	d909      	bls.n	800045a <__udivmoddi4+0xc2>
 8000446:	2d00      	cmp	r5, #0
 8000448:	f000 80ef 	beq.w	800062a <__udivmoddi4+0x292>
 800044c:	2600      	movs	r6, #0
 800044e:	e9c5 0100 	strd	r0, r1, [r5]
 8000452:	4630      	mov	r0, r6
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	fab3 f683 	clz	r6, r3
 800045e:	2e00      	cmp	r6, #0
 8000460:	d14a      	bne.n	80004f8 <__udivmoddi4+0x160>
 8000462:	428b      	cmp	r3, r1
 8000464:	d302      	bcc.n	800046c <__udivmoddi4+0xd4>
 8000466:	4282      	cmp	r2, r0
 8000468:	f200 80f9 	bhi.w	800065e <__udivmoddi4+0x2c6>
 800046c:	1a84      	subs	r4, r0, r2
 800046e:	eb61 0303 	sbc.w	r3, r1, r3
 8000472:	2001      	movs	r0, #1
 8000474:	469e      	mov	lr, r3
 8000476:	2d00      	cmp	r5, #0
 8000478:	d0e0      	beq.n	800043c <__udivmoddi4+0xa4>
 800047a:	e9c5 4e00 	strd	r4, lr, [r5]
 800047e:	e7dd      	b.n	800043c <__udivmoddi4+0xa4>
 8000480:	b902      	cbnz	r2, 8000484 <__udivmoddi4+0xec>
 8000482:	deff      	udf	#255	; 0xff
 8000484:	fab2 f282 	clz	r2, r2
 8000488:	2a00      	cmp	r2, #0
 800048a:	f040 8092 	bne.w	80005b2 <__udivmoddi4+0x21a>
 800048e:	eba1 010c 	sub.w	r1, r1, ip
 8000492:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	2601      	movs	r6, #1
 800049c:	0c20      	lsrs	r0, r4, #16
 800049e:	fbb1 f3f7 	udiv	r3, r1, r7
 80004a2:	fb07 1113 	mls	r1, r7, r3, r1
 80004a6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004aa:	fb0e f003 	mul.w	r0, lr, r3
 80004ae:	4288      	cmp	r0, r1
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x12c>
 80004b2:	eb1c 0101 	adds.w	r1, ip, r1
 80004b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0x12a>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f200 80cb 	bhi.w	8000658 <__udivmoddi4+0x2c0>
 80004c2:	4643      	mov	r3, r8
 80004c4:	1a09      	subs	r1, r1, r0
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80004cc:	fb07 1110 	mls	r1, r7, r0, r1
 80004d0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004d4:	fb0e fe00 	mul.w	lr, lr, r0
 80004d8:	45a6      	cmp	lr, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x156>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e4:	d202      	bcs.n	80004ec <__udivmoddi4+0x154>
 80004e6:	45a6      	cmp	lr, r4
 80004e8:	f200 80bb 	bhi.w	8000662 <__udivmoddi4+0x2ca>
 80004ec:	4608      	mov	r0, r1
 80004ee:	eba4 040e 	sub.w	r4, r4, lr
 80004f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x9a>
 80004f8:	f1c6 0720 	rsb	r7, r6, #32
 80004fc:	40b3      	lsls	r3, r6
 80004fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000502:	ea4c 0c03 	orr.w	ip, ip, r3
 8000506:	fa20 f407 	lsr.w	r4, r0, r7
 800050a:	fa01 f306 	lsl.w	r3, r1, r6
 800050e:	431c      	orrs	r4, r3
 8000510:	40f9      	lsrs	r1, r7
 8000512:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000516:	fa00 f306 	lsl.w	r3, r0, r6
 800051a:	fbb1 f8f9 	udiv	r8, r1, r9
 800051e:	0c20      	lsrs	r0, r4, #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fb09 1118 	mls	r1, r9, r8, r1
 8000528:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800052c:	fb08 f00e 	mul.w	r0, r8, lr
 8000530:	4288      	cmp	r0, r1
 8000532:	fa02 f206 	lsl.w	r2, r2, r6
 8000536:	d90b      	bls.n	8000550 <__udivmoddi4+0x1b8>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000540:	f080 8088 	bcs.w	8000654 <__udivmoddi4+0x2bc>
 8000544:	4288      	cmp	r0, r1
 8000546:	f240 8085 	bls.w	8000654 <__udivmoddi4+0x2bc>
 800054a:	f1a8 0802 	sub.w	r8, r8, #2
 800054e:	4461      	add	r1, ip
 8000550:	1a09      	subs	r1, r1, r0
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb1 f0f9 	udiv	r0, r1, r9
 8000558:	fb09 1110 	mls	r1, r9, r0, r1
 800055c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000560:	fb00 fe0e 	mul.w	lr, r0, lr
 8000564:	458e      	cmp	lr, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x1e2>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000570:	d26c      	bcs.n	800064c <__udivmoddi4+0x2b4>
 8000572:	458e      	cmp	lr, r1
 8000574:	d96a      	bls.n	800064c <__udivmoddi4+0x2b4>
 8000576:	3802      	subs	r0, #2
 8000578:	4461      	add	r1, ip
 800057a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800057e:	fba0 9402 	umull	r9, r4, r0, r2
 8000582:	eba1 010e 	sub.w	r1, r1, lr
 8000586:	42a1      	cmp	r1, r4
 8000588:	46c8      	mov	r8, r9
 800058a:	46a6      	mov	lr, r4
 800058c:	d356      	bcc.n	800063c <__udivmoddi4+0x2a4>
 800058e:	d053      	beq.n	8000638 <__udivmoddi4+0x2a0>
 8000590:	b15d      	cbz	r5, 80005aa <__udivmoddi4+0x212>
 8000592:	ebb3 0208 	subs.w	r2, r3, r8
 8000596:	eb61 010e 	sbc.w	r1, r1, lr
 800059a:	fa01 f707 	lsl.w	r7, r1, r7
 800059e:	fa22 f306 	lsr.w	r3, r2, r6
 80005a2:	40f1      	lsrs	r1, r6
 80005a4:	431f      	orrs	r7, r3
 80005a6:	e9c5 7100 	strd	r7, r1, [r5]
 80005aa:	2600      	movs	r6, #0
 80005ac:	4631      	mov	r1, r6
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	f1c2 0320 	rsb	r3, r2, #32
 80005b6:	40d8      	lsrs	r0, r3
 80005b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80005bc:	fa21 f303 	lsr.w	r3, r1, r3
 80005c0:	4091      	lsls	r1, r2
 80005c2:	4301      	orrs	r1, r0
 80005c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005c8:	fa1f fe8c 	uxth.w	lr, ip
 80005cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80005d0:	fb07 3610 	mls	r6, r7, r0, r3
 80005d4:	0c0b      	lsrs	r3, r1, #16
 80005d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005da:	fb00 f60e 	mul.w	r6, r0, lr
 80005de:	429e      	cmp	r6, r3
 80005e0:	fa04 f402 	lsl.w	r4, r4, r2
 80005e4:	d908      	bls.n	80005f8 <__udivmoddi4+0x260>
 80005e6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ee:	d22f      	bcs.n	8000650 <__udivmoddi4+0x2b8>
 80005f0:	429e      	cmp	r6, r3
 80005f2:	d92d      	bls.n	8000650 <__udivmoddi4+0x2b8>
 80005f4:	3802      	subs	r0, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	1b9b      	subs	r3, r3, r6
 80005fa:	b289      	uxth	r1, r1
 80005fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000600:	fb07 3316 	mls	r3, r7, r6, r3
 8000604:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000608:	fb06 f30e 	mul.w	r3, r6, lr
 800060c:	428b      	cmp	r3, r1
 800060e:	d908      	bls.n	8000622 <__udivmoddi4+0x28a>
 8000610:	eb1c 0101 	adds.w	r1, ip, r1
 8000614:	f106 38ff 	add.w	r8, r6, #4294967295
 8000618:	d216      	bcs.n	8000648 <__udivmoddi4+0x2b0>
 800061a:	428b      	cmp	r3, r1
 800061c:	d914      	bls.n	8000648 <__udivmoddi4+0x2b0>
 800061e:	3e02      	subs	r6, #2
 8000620:	4461      	add	r1, ip
 8000622:	1ac9      	subs	r1, r1, r3
 8000624:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000628:	e738      	b.n	800049c <__udivmoddi4+0x104>
 800062a:	462e      	mov	r6, r5
 800062c:	4628      	mov	r0, r5
 800062e:	e705      	b.n	800043c <__udivmoddi4+0xa4>
 8000630:	4606      	mov	r6, r0
 8000632:	e6e3      	b.n	80003fc <__udivmoddi4+0x64>
 8000634:	4618      	mov	r0, r3
 8000636:	e6f8      	b.n	800042a <__udivmoddi4+0x92>
 8000638:	454b      	cmp	r3, r9
 800063a:	d2a9      	bcs.n	8000590 <__udivmoddi4+0x1f8>
 800063c:	ebb9 0802 	subs.w	r8, r9, r2
 8000640:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000644:	3801      	subs	r0, #1
 8000646:	e7a3      	b.n	8000590 <__udivmoddi4+0x1f8>
 8000648:	4646      	mov	r6, r8
 800064a:	e7ea      	b.n	8000622 <__udivmoddi4+0x28a>
 800064c:	4620      	mov	r0, r4
 800064e:	e794      	b.n	800057a <__udivmoddi4+0x1e2>
 8000650:	4640      	mov	r0, r8
 8000652:	e7d1      	b.n	80005f8 <__udivmoddi4+0x260>
 8000654:	46d0      	mov	r8, sl
 8000656:	e77b      	b.n	8000550 <__udivmoddi4+0x1b8>
 8000658:	3b02      	subs	r3, #2
 800065a:	4461      	add	r1, ip
 800065c:	e732      	b.n	80004c4 <__udivmoddi4+0x12c>
 800065e:	4630      	mov	r0, r6
 8000660:	e709      	b.n	8000476 <__udivmoddi4+0xde>
 8000662:	4464      	add	r4, ip
 8000664:	3802      	subs	r0, #2
 8000666:	e742      	b.n	80004ee <__udivmoddi4+0x156>

08000668 <__aeabi_idiv0>:
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000672:	f3ef 8314 	mrs	r3, CONTROL
 8000676:	607b      	str	r3, [r7, #4]
  return(result);
 8000678:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 800067a:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	61fb      	str	r3, [r7, #28]
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	f383 8814 	msr	CONTROL, r3
}
 800068e:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000690:	f3ef 8314 	mrs	r3, CONTROL
 8000694:	60fb      	str	r3, [r7, #12]
  return(result);
 8000696:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 8000698:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	f023 0301 	bic.w	r3, r3, #1
 80006a0:	61fb      	str	r3, [r7, #28]
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	f383 8814 	msr	CONTROL, r3
}
 80006ac:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006ae:	f3ef 8314 	mrs	r3, CONTROL
 80006b2:	617b      	str	r3, [r7, #20]
  return(result);
 80006b4:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 80006b6:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 80006b8:	f7ff fd98 	bl	80001ec <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006bc:	f3ef 8314 	mrs	r3, CONTROL
 80006c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80006c2:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 80006c4:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 80006c6:	bf00      	nop
 80006c8:	3720      	adds	r7, #32
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b5b0      	push	{r4, r5, r7, lr}
 80006d2:	f5ad 4d87 	sub.w	sp, sp, #17280	; 0x4380
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f001 f835 	bl	8001748 <HAL_Init>

  /* USER CODE BEGIN Init */

  DWT->CTRL |= 1 << DWT_CTRL_CYCCNTENA_Pos;
 80006de:	4b6f      	ldr	r3, [pc, #444]	; (800089c <main+0x1cc>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a6e      	ldr	r2, [pc, #440]	; (800089c <main+0x1cc>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6013      	str	r3, [r2, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 fa63 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ee:	f000 fb71 	bl	8000dd4 <MX_GPIO_Init>
  MX_ETH_Init();
 80006f2:	f000 fac9 	bl	8000c88 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006f6:	f000 fb15 	bl	8000d24 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006fa:	f000 fb3d 	bl	8000d78 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 80006fe:	f7ff ffb5 	bl	800066c <PrivilegiosSVC>

  const uint32_t Resultado = asm_sum (5, 3);
 8000702:	2103      	movs	r1, #3
 8000704:	2005      	movs	r0, #5
 8000706:	f7ff fd73 	bl	80001f0 <asm_sum>
 800070a:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 800070e:	f103 031c 	add.w	r3, r3, #28
 8000712:	6018      	str	r0, [r3, #0]

  //Verificación de funciones en C

  uint32_t vectorZeros_C[5]={0xFF,0xFF,0xFF,0xFF,0xFF};
 8000714:	4b62      	ldr	r3, [pc, #392]	; (80008a0 <main+0x1d0>)
 8000716:	f507 4487 	add.w	r4, r7, #17280	; 0x4380
 800071a:	461d      	mov	r5, r3
 800071c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000720:	682b      	ldr	r3, [r5, #0]
 8000722:	6023      	str	r3, [r4, #0]
  zeros (vectorZeros_C,5);
 8000724:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 8000728:	2105      	movs	r1, #5
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fc00 	bl	8000f30 <zeros>

  uint32_t vectorProdEsc32In_C[5]={0x1111,0x2222,0x4444,0x8888,0xFFFF};
 8000730:	4b5c      	ldr	r3, [pc, #368]	; (80008a4 <main+0x1d4>)
 8000732:	f507 4486 	add.w	r4, r7, #17152	; 0x4300
 8000736:	f104 046c 	add.w	r4, r4, #108	; 0x6c
 800073a:	461d      	mov	r5, r3
 800073c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000740:	682b      	ldr	r3, [r5, #0]
 8000742:	6023      	str	r3, [r4, #0]
  uint32_t vectorProdEsc32Out_C[5];
  productoEscalar32 (vectorProdEsc32In_C, vectorProdEsc32Out_C, 5, 0xF);
 8000744:	f507 4186 	add.w	r1, r7, #17152	; 0x4300
 8000748:	f101 0158 	add.w	r1, r1, #88	; 0x58
 800074c:	f507 4086 	add.w	r0, r7, #17152	; 0x4300
 8000750:	f100 006c 	add.w	r0, r0, #108	; 0x6c
 8000754:	230f      	movs	r3, #15
 8000756:	2205      	movs	r2, #5
 8000758:	f000 fc06 	bl	8000f68 <productoEscalar32>

  uint16_t vectorProdEsc16In_C[5]={0x11,0x22,0x444,0x888,0xFFF};
 800075c:	4a52      	ldr	r2, [pc, #328]	; (80008a8 <main+0x1d8>)
 800075e:	f507 4386 	add.w	r3, r7, #17152	; 0x4300
 8000762:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000766:	ca07      	ldmia	r2, {r0, r1, r2}
 8000768:	c303      	stmia	r3!, {r0, r1}
 800076a:	801a      	strh	r2, [r3, #0]
  uint16_t vectorProdEsc16Out_C[5];
  productoEscalar16 (vectorProdEsc16In_C, vectorProdEsc16Out_C, 5, 0xF);
 800076c:	f507 4186 	add.w	r1, r7, #17152	; 0x4300
 8000770:	f101 0140 	add.w	r1, r1, #64	; 0x40
 8000774:	f507 4086 	add.w	r0, r7, #17152	; 0x4300
 8000778:	f100 004c 	add.w	r0, r0, #76	; 0x4c
 800077c:	230f      	movs	r3, #15
 800077e:	2205      	movs	r2, #5
 8000780:	f000 fc1a 	bl	8000fb8 <productoEscalar16>

  uint16_t vectorProdEsc12In_C[5]={0x11,0x22,0x444,0x888,0xFFF};
 8000784:	4a48      	ldr	r2, [pc, #288]	; (80008a8 <main+0x1d8>)
 8000786:	f507 4386 	add.w	r3, r7, #17152	; 0x4300
 800078a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800078e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000790:	c303      	stmia	r3!, {r0, r1}
 8000792:	801a      	strh	r2, [r3, #0]
  uint16_t vectorProdEsc12Out_C[5];
  productoEscalar12 (vectorProdEsc12In_C, vectorProdEsc12Out_C, 5, 0xF);
 8000794:	f507 4186 	add.w	r1, r7, #17152	; 0x4300
 8000798:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800079c:	f507 4086 	add.w	r0, r7, #17152	; 0x4300
 80007a0:	f100 0034 	add.w	r0, r0, #52	; 0x34
 80007a4:	230f      	movs	r3, #15
 80007a6:	2205      	movs	r2, #5
 80007a8:	f000 fc2f 	bl	800100a <productoEscalar12>

  uint16_t vectorVentanaIn_C[15]={
 80007ac:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <main+0x1dc>)
 80007ae:	f507 4486 	add.w	r4, r7, #17152	; 0x4300
 80007b2:	f104 0408 	add.w	r4, r4, #8
 80007b6:	461d      	mov	r5, r3
 80007b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007c0:	c407      	stmia	r4!, {r0, r1, r2}
 80007c2:	8023      	strh	r3, [r4, #0]
		  10,10,10,10,10,
		  10,10,10,10,10,
		  10,10,10,10,10
  };
  uint16_t vectorVentanaOut_C[15];
  filtroVentana10(vectorVentanaIn_C, vectorVentanaOut_C,15);
 80007c4:	f507 4185 	add.w	r1, r7, #17024	; 0x4280
 80007c8:	f101 0168 	add.w	r1, r1, #104	; 0x68
 80007cc:	f507 4386 	add.w	r3, r7, #17152	; 0x4300
 80007d0:	f103 0308 	add.w	r3, r3, #8
 80007d4:	220f      	movs	r2, #15
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 fc56 	bl	8001088 <filtroVentana10>

  int32_t vectorPack32In_C[5]={0x1111,0x22222,0x444444,0x8888888,0x800FFFFF};
 80007dc:	4b34      	ldr	r3, [pc, #208]	; (80008b0 <main+0x1e0>)
 80007de:	f507 4485 	add.w	r4, r7, #17024	; 0x4280
 80007e2:	f104 0454 	add.w	r4, r4, #84	; 0x54
 80007e6:	461d      	mov	r5, r3
 80007e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ec:	682b      	ldr	r3, [r5, #0]
 80007ee:	6023      	str	r3, [r4, #0]
  int16_t vectorPack32Out_C[5];
  pack32to16 (vectorPack32In_C,vectorPack32Out_C, 5);
 80007f0:	f507 4185 	add.w	r1, r7, #17024	; 0x4280
 80007f4:	f101 0148 	add.w	r1, r1, #72	; 0x48
 80007f8:	f507 4385 	add.w	r3, r7, #17024	; 0x4280
 80007fc:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8000800:	2205      	movs	r2, #5
 8000802:	4618      	mov	r0, r3
 8000804:	f000 fc8a 	bl	800111c <pack32to16>

  int32_t vectorMax_C[5]={1,10,-20,-5,5};
 8000808:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <main+0x1e4>)
 800080a:	f507 4485 	add.w	r4, r7, #17024	; 0x4280
 800080e:	f104 0434 	add.w	r4, r4, #52	; 0x34
 8000812:	461d      	mov	r5, r3
 8000814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000818:	682b      	ldr	r3, [r5, #0]
 800081a:	6023      	str	r3, [r4, #0]
  int32_t maxValueIndex_C = max (vectorMax_C, 5);
 800081c:	f507 4385 	add.w	r3, r7, #17024	; 0x4280
 8000820:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000824:	2105      	movs	r1, #5
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fc9e 	bl	8001168 <max>
 800082c:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 8000830:	f103 0318 	add.w	r3, r3, #24
 8000834:	6018      	str	r0, [r3, #0]

  int32_t vectorDownSampleIn_C[30]={
 8000836:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 800083a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800083e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8000842:	4a1d      	ldr	r2, [pc, #116]	; (80008b8 <main+0x1e8>)
 8000844:	4618      	mov	r0, r3
 8000846:	4611      	mov	r1, r2
 8000848:	2378      	movs	r3, #120	; 0x78
 800084a:	461a      	mov	r2, r3
 800084c:	f003 f982 	bl	8003b54 <memcpy>
		  0,1,2,3,4,5,6,7,8,9,
		  10,11,12,13,14,15,16,17,18,19,
		  20,21,22,23,24,25,26,27,28,29
  };
  int32_t vectorDownSampleOut_C[24];
  downsampleM (vectorDownSampleIn_C, vectorDownSampleOut_C, 30, 5);
 8000850:	f507 4183 	add.w	r1, r7, #16768	; 0x4180
 8000854:	f101 015c 	add.w	r1, r1, #92	; 0x5c
 8000858:	f507 4084 	add.w	r0, r7, #16896	; 0x4200
 800085c:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 8000860:	2305      	movs	r3, #5
 8000862:	221e      	movs	r2, #30
 8000864:	f000 fcb9 	bl	80011da <downsampleM>

  uint16_t vectorInv_C[6]={0,10,20,30,40,50};
 8000868:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 800086c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000870:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8000874:	4a11      	ldr	r2, [pc, #68]	; (80008bc <main+0x1ec>)
 8000876:	ca07      	ldmia	r2, {r0, r1, r2}
 8000878:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  invertir (vectorInv_C, 6);
 800087c:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000880:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000884:	2106      	movs	r1, #6
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fcdc 	bl	8001244 <invertir>

  int16_t ecoVectorSamples_C[ECO_VECTOR_LENGTH];

  //La idea de asignar así el vector es para utilizar el rango negativo
  for(int i=-ECO_VECTOR_LENGTH/2 ; i< (ECO_VECTOR_LENGTH/2) ; i++){
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <main+0x1f0>)
 800088e:	f507 4287 	add.w	r2, r7, #17280	; 0x4380
 8000892:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	e034      	b.n	8000904 <main+0x234>
 800089a:	bf00      	nop
 800089c:	e0001000 	.word	0xe0001000
 80008a0:	08003b98 	.word	0x08003b98
 80008a4:	08003bac 	.word	0x08003bac
 80008a8:	08003bc0 	.word	0x08003bc0
 80008ac:	08003bcc 	.word	0x08003bcc
 80008b0:	08003bec 	.word	0x08003bec
 80008b4:	08003c00 	.word	0x08003c00
 80008b8:	08003c14 	.word	0x08003c14
 80008bc:	08003c8c 	.word	0x08003c8c
 80008c0:	fffff800 	.word	0xfffff800
	  ecoVectorSamples_C[ECO_VECTOR_LENGTH/2+i]=i;
 80008c4:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 80008c8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 80008d2:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 80008d6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	b219      	sxth	r1, r3
 80008de:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 80008e2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80008e6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80008ea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(int i=-ECO_VECTOR_LENGTH/2 ; i< (ECO_VECTOR_LENGTH/2) ; i++){
 80008ee:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 80008f2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	f507 4287 	add.w	r2, r7, #17280	; 0x4380
 80008fe:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 8000908:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000912:	dbd7      	blt.n	80008c4 <main+0x1f4>
  }

  DWT->CYCCNT = 0;
 8000914:	4b9d      	ldr	r3, [pc, #628]	; (8000b8c <main+0x4bc>)
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
  addEcoVector(ecoVectorSamples_C,ECO_VECTOR_LENGTH,ECO_SAMPLE_DELAY);
 800091a:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800091e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000922:	3b18      	subs	r3, #24
 8000924:	f240 3272 	movw	r2, #882	; 0x372
 8000928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092c:	4618      	mov	r0, r3
 800092e:	f000 fcc6 	bl	80012be <addEcoVector>
  const volatile uint32_t CiclosEco_C = DWT->CYCCNT;
 8000932:	4b96      	ldr	r3, [pc, #600]	; (8000b8c <main+0x4bc>)
 8000934:	685a      	ldr	r2, [r3, #4]
 8000936:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 800093a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800093e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8000942:	601a      	str	r2, [r3, #0]


  //Verificación de funciones en ASM

  uint32_t vectorZeros_ASM[5]={0xFF,0xFF,0xFF,0xFF,0xFF};
 8000944:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 8000948:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800094c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000950:	4a8f      	ldr	r2, [pc, #572]	; (8000b90 <main+0x4c0>)
 8000952:	461c      	mov	r4, r3
 8000954:	4615      	mov	r5, r2
 8000956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095a:	682b      	ldr	r3, [r5, #0]
 800095c:	6023      	str	r3, [r4, #0]
  asm_zeros(vectorZeros_ASM,5);
 800095e:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8000962:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000966:	3b30      	subs	r3, #48	; 0x30
 8000968:	2105      	movs	r1, #5
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fc42 	bl	80001f4 <asm_zeros>

  uint32_t vectorProdEsc32In_ASM[5]={0x1111,0x2222,0x4444,0x8888,0xFFFF};
 8000970:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 8000974:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000978:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800097c:	4a85      	ldr	r2, [pc, #532]	; (8000b94 <main+0x4c4>)
 800097e:	461c      	mov	r4, r3
 8000980:	4615      	mov	r5, r2
 8000982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000986:	682b      	ldr	r3, [r5, #0]
 8000988:	6023      	str	r3, [r4, #0]
  uint32_t vectorProdEsc32Out_ASM[5];
  asm_productoEscalar32 (vectorProdEsc32In_ASM, vectorProdEsc32Out_ASM, 5, 0xF);
 800098a:	f507 5106 	add.w	r1, r7, #8576	; 0x2180
 800098e:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8000992:	3918      	subs	r1, #24
 8000994:	f507 5006 	add.w	r0, r7, #8576	; 0x2180
 8000998:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800099c:	3804      	subs	r0, #4
 800099e:	230f      	movs	r3, #15
 80009a0:	2205      	movs	r2, #5
 80009a2:	f7ff fc2e 	bl	8000202 <asm_productoEscalar32>

  uint16_t vectorProdEsc16In_ASM[5]={0x11,0x22,0x444,0x888,0xFFF};
 80009a6:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 80009aa:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80009ae:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80009b2:	4a79      	ldr	r2, [pc, #484]	; (8000b98 <main+0x4c8>)
 80009b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80009b6:	c303      	stmia	r3!, {r0, r1}
 80009b8:	801a      	strh	r2, [r3, #0]
  uint16_t vectorProdEsc16Out_ASM[5];
  asm_productoEscalar16 (vectorProdEsc16In_ASM, vectorProdEsc16Out_ASM, 5, 0xF);
 80009ba:	f507 5106 	add.w	r1, r7, #8576	; 0x2180
 80009be:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80009c2:	3930      	subs	r1, #48	; 0x30
 80009c4:	f507 5006 	add.w	r0, r7, #8576	; 0x2180
 80009c8:	f100 0028 	add.w	r0, r0, #40	; 0x28
 80009cc:	3824      	subs	r0, #36	; 0x24
 80009ce:	230f      	movs	r3, #15
 80009d0:	2205      	movs	r2, #5
 80009d2:	f7ff fc21 	bl	8000218 <asm_productoEscalar16>

  uint16_t vectorProdEsc12In_ASM[5]={0x11,0x22,0x444,0x888,0xFFF};
 80009d6:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 80009da:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80009de:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80009e2:	4a6d      	ldr	r2, [pc, #436]	; (8000b98 <main+0x4c8>)
 80009e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80009e6:	c303      	stmia	r3!, {r0, r1}
 80009e8:	801a      	strh	r2, [r3, #0]
  uint16_t vectorProdEsc12Out_ASM[5];
  asm_productoEscalar12 (vectorProdEsc12In_ASM, vectorProdEsc12Out_ASM, 5, 0xF);
 80009ea:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 80009ee:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80009f2:	3908      	subs	r1, #8
 80009f4:	f507 5006 	add.w	r0, r7, #8576	; 0x2180
 80009f8:	f100 0028 	add.w	r0, r0, #40	; 0x28
 80009fc:	383c      	subs	r0, #60	; 0x3c
 80009fe:	230f      	movs	r3, #15
 8000a00:	2205      	movs	r2, #5
 8000a02:	f7ff fc14 	bl	800022e <asm_productoEscalar12>

  uint16_t vectorVentanaIn_ASM[15]={
 8000a06:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 8000a0a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000a0e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000a12:	4a62      	ldr	r2, [pc, #392]	; (8000b9c <main+0x4cc>)
 8000a14:	461c      	mov	r4, r3
 8000a16:	4615      	mov	r5, r2
 8000a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a20:	c407      	stmia	r4!, {r0, r1, r2}
 8000a22:	8023      	strh	r3, [r4, #0]
		  10,10,10,10,10,
		  10,10,10,10,10,
		  10,10,10,10,10
  };
  uint16_t vectorVentanaOut_ASM[15];
  asm_filtroVentana10(vectorVentanaIn_ASM, vectorVentanaOut_ASM,15);
 8000a24:	f507 5104 	add.w	r1, r7, #8448	; 0x2100
 8000a28:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8000a2c:	3908      	subs	r1, #8
 8000a2e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8000a32:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000a36:	3b28      	subs	r3, #40	; 0x28
 8000a38:	220f      	movs	r2, #15
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fc04 	bl	8000248 <asm_filtroVentana10>

  int32_t vectorPack32In_ASM[5]={0x1111,0x22222,0x444444,0x8888888,0x800FFFFF};
 8000a40:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 8000a44:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000a48:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8000a4c:	4a54      	ldr	r2, [pc, #336]	; (8000ba0 <main+0x4d0>)
 8000a4e:	461c      	mov	r4, r3
 8000a50:	4615      	mov	r5, r2
 8000a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a56:	682b      	ldr	r3, [r5, #0]
 8000a58:	6023      	str	r3, [r4, #0]
  int16_t vectorPack32Out_ASM[5];
  asm_pack32to16 (vectorPack32In_ASM,vectorPack32Out_ASM, 5);
 8000a5a:	f507 5104 	add.w	r1, r7, #8448	; 0x2100
 8000a5e:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8000a62:	3928      	subs	r1, #40	; 0x28
 8000a64:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8000a68:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000a6c:	3b1c      	subs	r3, #28
 8000a6e:	2205      	movs	r2, #5
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fc14 	bl	800029e <asm_pack32to16>

  int32_t vectorMax_ASM[5]={1,10,-20,-5,5};
 8000a76:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 8000a7a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000a7e:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8000a82:	4a48      	ldr	r2, [pc, #288]	; (8000ba4 <main+0x4d4>)
 8000a84:	461c      	mov	r4, r3
 8000a86:	4615      	mov	r5, r2
 8000a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8c:	682b      	ldr	r3, [r5, #0]
 8000a8e:	6023      	str	r3, [r4, #0]
  int32_t maxValueIndex_ASM = asm_max (vectorMax_ASM, 5);
 8000a90:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8000a94:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000a98:	3b3c      	subs	r3, #60	; 0x3c
 8000a9a:	2105      	movs	r1, #5
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fc07 	bl	80002b0 <asm_max>
 8000aa2:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 8000aa6:	f103 0314 	add.w	r3, r3, #20
 8000aaa:	6018      	str	r0, [r3, #0]

  int32_t vectorDownSampleIn_ASM[30]={
 8000aac:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 8000ab0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000ab4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8000ab8:	4a3b      	ldr	r2, [pc, #236]	; (8000ba8 <main+0x4d8>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	4611      	mov	r1, r2
 8000abe:	2378      	movs	r3, #120	; 0x78
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f003 f847 	bl	8003b54 <memcpy>
		  0,1,2,3,4,5,6,7,8,9,
		  10,11,12,13,14,15,16,17,18,19,
		  20,21,22,23,24,25,26,27,28,29
  };
  int32_t vectorDownSampleOut_ASM[24];
  asm_downsampleM (vectorDownSampleIn_ASM, vectorDownSampleOut_ASM, 30, 5);
 8000ac6:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8000aca:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8000ace:	3914      	subs	r1, #20
 8000ad0:	f507 5002 	add.w	r0, r7, #8320	; 0x2080
 8000ad4:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8000ad8:	3834      	subs	r0, #52	; 0x34
 8000ada:	2305      	movs	r3, #5
 8000adc:	221e      	movs	r2, #30
 8000ade:	f7ff fbf9 	bl	80002d4 <asm_downsampleM>

  uint16_t vectorInv_ASM[6]={0,10,20,30,40,50};
 8000ae2:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 8000ae6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000aea:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8000aee:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <main+0x4dc>)
 8000af0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000af2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  asm_invertir (vectorInv_ASM, 6);
 8000af6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000afa:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000afe:	3b20      	subs	r3, #32
 8000b00:	2106      	movs	r1, #6
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fc03 	bl	800030e <asm_invertir>

  int16_t ecoVectorSamples_ASM[ECO_VECTOR_LENGTH];

  //La idea de asignar así el vector es para utilizar el rango negativo
  for(int i=-ECO_VECTOR_LENGTH/2 ; i< (ECO_VECTOR_LENGTH/2) ; i++){
 8000b08:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <main+0x4e0>)
 8000b0a:	f507 4287 	add.w	r2, r7, #17280	; 0x4380
 8000b0e:	f102 0220 	add.w	r2, r2, #32
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	e01d      	b.n	8000b52 <main+0x482>
	  ecoVectorSamples_ASM[ECO_VECTOR_LENGTH/2+i]=i;
 8000b16:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 8000b1a:	f103 0320 	add.w	r3, r3, #32
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 8000b24:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 8000b28:	f103 0320 	add.w	r3, r3, #32
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	b219      	sxth	r1, r3
 8000b30:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000b34:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8000b38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(int i=-ECO_VECTOR_LENGTH/2 ; i< (ECO_VECTOR_LENGTH/2) ; i++){
 8000b3c:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 8000b40:	f103 0320 	add.w	r3, r3, #32
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	3301      	adds	r3, #1
 8000b48:	f507 4287 	add.w	r2, r7, #17280	; 0x4380
 8000b4c:	f102 0220 	add.w	r2, r2, #32
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 8000b56:	f103 0320 	add.w	r3, r3, #32
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b60:	dbd9      	blt.n	8000b16 <main+0x446>
  }

  DWT->CYCCNT = 0;
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <main+0x4bc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
  asm_addEcoVector(ecoVectorSamples_ASM,ECO_VECTOR_LENGTH,ECO_SAMPLE_DELAY);
 8000b68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6c:	3b20      	subs	r3, #32
 8000b6e:	f240 3272 	movw	r2, #882	; 0x372
 8000b72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fbdf 	bl	800033a <asm_addEcoVector>
  const volatile uint32_t CiclosEco_ASM = DWT->CYCCNT;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <main+0x4bc>)
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000b84:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8000b88:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <main+0x4ba>
 8000b8c:	e0001000 	.word	0xe0001000
 8000b90:	08003b98 	.word	0x08003b98
 8000b94:	08003bac 	.word	0x08003bac
 8000b98:	08003bc0 	.word	0x08003bc0
 8000b9c:	08003bcc 	.word	0x08003bcc
 8000ba0:	08003bec 	.word	0x08003bec
 8000ba4:	08003c00 	.word	0x08003c00
 8000ba8:	08003c14 	.word	0x08003c14
 8000bac:	08003c8c 	.word	0x08003c8c
 8000bb0:	fffff800 	.word	0xfffff800

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	; 0x50
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0320 	add.w	r3, r7, #32
 8000bbe:	2230      	movs	r2, #48	; 0x30
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 ffd4 	bl	8003b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <SystemClock_Config+0xcc>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	4a27      	ldr	r2, [pc, #156]	; (8000c80 <SystemClock_Config+0xcc>)
 8000be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be6:	6413      	str	r3, [r2, #64]	; 0x40
 8000be8:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <SystemClock_Config+0xcc>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <SystemClock_Config+0xd0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a21      	ldr	r2, [pc, #132]	; (8000c84 <SystemClock_Config+0xd0>)
 8000bfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <SystemClock_Config+0xd0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c10:	2301      	movs	r3, #1
 8000c12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c24:	2304      	movs	r3, #4
 8000c26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c28:	23a8      	movs	r3, #168	; 0xa8
 8000c2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c30:	2307      	movs	r3, #7
 8000c32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c34:	f107 0320 	add.w	r3, r7, #32
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 fd0b 	bl	8002654 <HAL_RCC_OscConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c44:	f000 fb70 	bl	8001328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c48:	230f      	movs	r3, #15
 8000c4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	2105      	movs	r1, #5
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 ff6c 	bl	8002b44 <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c72:	f000 fb59 	bl	8001328 <Error_Handler>
  }
}
 8000c76:	bf00      	nop
 8000c78:	3750      	adds	r7, #80	; 0x50
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40007000 	.word	0x40007000

08000c88 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <MX_ETH_Init+0x84>)
 8000c8e:	4a20      	ldr	r2, [pc, #128]	; (8000d10 <MX_ETH_Init+0x88>)
 8000c90:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <MX_ETH_Init+0x8c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <MX_ETH_Init+0x8c>)
 8000c9a:	2280      	movs	r2, #128	; 0x80
 8000c9c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_ETH_Init+0x8c>)
 8000ca0:	22e1      	movs	r2, #225	; 0xe1
 8000ca2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_ETH_Init+0x8c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_ETH_Init+0x8c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_ETH_Init+0x8c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_ETH_Init+0x84>)
 8000cb8:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <MX_ETH_Init+0x8c>)
 8000cba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_ETH_Init+0x84>)
 8000cbe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000cc2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_ETH_Init+0x84>)
 8000cc6:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <MX_ETH_Init+0x90>)
 8000cc8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_ETH_Init+0x84>)
 8000ccc:	4a13      	ldr	r2, [pc, #76]	; (8000d1c <MX_ETH_Init+0x94>)
 8000cce:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_ETH_Init+0x84>)
 8000cd2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000cd6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <MX_ETH_Init+0x84>)
 8000cda:	f000 feb1 	bl	8001a40 <HAL_ETH_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000ce4:	f000 fb20 	bl	8001328 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ce8:	2238      	movs	r2, #56	; 0x38
 8000cea:	2100      	movs	r1, #0
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <MX_ETH_Init+0x98>)
 8000cee:	f002 ff3f 	bl	8003b70 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <MX_ETH_Init+0x98>)
 8000cf4:	2221      	movs	r2, #33	; 0x21
 8000cf6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_ETH_Init+0x98>)
 8000cfa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000cfe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <MX_ETH_Init+0x98>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200001a0 	.word	0x200001a0
 8000d10:	40028000 	.word	0x40028000
 8000d14:	200007a0 	.word	0x200007a0
 8000d18:	20000100 	.word	0x20000100
 8000d1c:	20000060 	.word	0x20000060
 8000d20:	20000028 	.word	0x20000028

08000d24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <MX_USART3_UART_Init+0x50>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d5c:	f002 f912 	bl	8002f84 <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d66:	f000 fadf 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000250 	.word	0x20000250
 8000d74:	40004800 	.word	0x40004800

08000d78 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d86:	2204      	movs	r2, #4
 8000d88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d98:	2202      	movs	r2, #2
 8000d9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dbc:	f001 fb2d 	bl	800241a <HAL_PCD_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000dc6:	f000 faaf 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000294 	.word	0x20000294

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	; 0x30
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	4b4c      	ldr	r3, [pc, #304]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a4b      	ldr	r2, [pc, #300]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b49      	ldr	r3, [pc, #292]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	4b45      	ldr	r3, [pc, #276]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a44      	ldr	r2, [pc, #272]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b42      	ldr	r3, [pc, #264]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a3d      	ldr	r2, [pc, #244]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b37      	ldr	r3, [pc, #220]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a36      	ldr	r2, [pc, #216]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a2f      	ldr	r2, [pc, #188]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a28      	ldr	r2, [pc, #160]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <MX_GPIO_Init+0x14c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e98:	4822      	ldr	r0, [pc, #136]	; (8000f24 <MX_GPIO_Init+0x150>)
 8000e9a:	f001 faa5 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2140      	movs	r1, #64	; 0x40
 8000ea2:	4821      	ldr	r0, [pc, #132]	; (8000f28 <MX_GPIO_Init+0x154>)
 8000ea4:	f001 faa0 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	481b      	ldr	r0, [pc, #108]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000ec0:	f001 f8e6 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ec4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4811      	ldr	r0, [pc, #68]	; (8000f24 <MX_GPIO_Init+0x150>)
 8000ede:	f001 f8d7 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ee2:	2340      	movs	r3, #64	; 0x40
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <MX_GPIO_Init+0x154>)
 8000efa:	f001 f8c9 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_GPIO_Init+0x154>)
 8000f12:	f001 f8bd 	bl	8002090 <HAL_GPIO_Init>

}
 8000f16:	bf00      	nop
 8000f18:	3730      	adds	r7, #48	; 0x30
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40021800 	.word	0x40021800
 8000f2c:	40020800 	.word	0x40020800

08000f30 <zeros>:

/* USER CODE BEGIN 4 */

void zeros (uint32_t* vector, uint32_t longitud){
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	for(;longitud;longitud--){
 8000f3a:	e00b      	b.n	8000f54 <zeros+0x24>
		vector[longitud-1]=0;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f42:	3b01      	subs	r3, #1
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
	for(;longitud;longitud--){
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f0      	bne.n	8000f3c <zeros+0xc>
	}
}
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <productoEscalar32>:

void productoEscalar32 (uint32_t * vectorIn, uint32_t * vectorOut, uint32_t longitud, uint32_t escalar){
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
	for(;longitud;longitud--){
 8000f76:	e015      	b.n	8000fa4 <productoEscalar32+0x3c>
		vectorOut[longitud-1]=escalar*vectorIn[longitud-1];
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	4413      	add	r3, r2
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	440b      	add	r3, r1
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	fb01 f202 	mul.w	r2, r1, r2
 8000f9c:	601a      	str	r2, [r3, #0]
	for(;longitud;longitud--){
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1e6      	bne.n	8000f78 <productoEscalar32+0x10>
	}
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <productoEscalar16>:

void productoEscalar16 (uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitud, uint16_t escalar){
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	807b      	strh	r3, [r7, #2]
	for(;longitud;longitud--){
 8000fc6:	e016      	b.n	8000ff6 <productoEscalar16+0x3e>
		vectorOut[longitud-1]=escalar*vectorIn[longitud-1];
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	881a      	ldrh	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	68b9      	ldr	r1, [r7, #8]
 8000fe4:	440b      	add	r3, r1
 8000fe6:	8879      	ldrh	r1, [r7, #2]
 8000fe8:	fb11 f202 	smulbb	r2, r1, r2
 8000fec:	b292      	uxth	r2, r2
 8000fee:	801a      	strh	r2, [r3, #0]
	for(;longitud;longitud--){
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1e5      	bne.n	8000fc8 <productoEscalar16+0x10>
	}
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <productoEscalar12>:

void productoEscalar12 (uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitud, uint16_t escalar){
 800100a:	b480      	push	{r7}
 800100c:	b085      	sub	sp, #20
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	807b      	strh	r3, [r7, #2]
	for(;longitud;longitud--){
 8001018:	e02b      	b.n	8001072 <productoEscalar12+0x68>
		vectorOut[longitud-1] = escalar*vectorIn[longitud-1];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001020:	3b01      	subs	r3, #1
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	881a      	ldrh	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001030:	3b01      	subs	r3, #1
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	440b      	add	r3, r1
 8001038:	8879      	ldrh	r1, [r7, #2]
 800103a:	fb11 f202 	smulbb	r2, r1, r2
 800103e:	b292      	uxth	r2, r2
 8001040:	801a      	strh	r2, [r3, #0]

		if(vectorOut[longitud-1]>LIM_12BITS){
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001048:	3b01      	subs	r3, #1
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	68ba      	ldr	r2, [r7, #8]
 800104e:	4413      	add	r3, r2
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001056:	d309      	bcc.n	800106c <productoEscalar12+0x62>
			vectorOut[longitud-1]=LIM_12BITS;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800105e:	3b01      	subs	r3, #1
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	4413      	add	r3, r2
 8001066:	f640 72ff 	movw	r2, #4095	; 0xfff
 800106a:	801a      	strh	r2, [r3, #0]
	for(;longitud;longitud--){
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1d0      	bne.n	800101a <productoEscalar12+0x10>
		}
	}
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <filtroVentana10>:

void filtroVentana10(uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitudVectorIn){
 8001088:	b480      	push	{r7}
 800108a:	b08b      	sub	sp, #44	; 0x2c
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
	for(int i=0;i<longitudVectorIn;i++){
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
 8001098:	e033      	b.n	8001102 <filtroVentana10+0x7a>
		uint32_t temp=0;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
		int windowStart=0;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
		int windowEnd=i+HALF_WINDOW+1;
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	3306      	adds	r3, #6
 80010a6:	61bb      	str	r3, [r7, #24]

		if(i>HALF_WINDOW)
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	dd02      	ble.n	80010b4 <filtroVentana10+0x2c>
			windowStart = i-HALF_WINDOW;
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	3b05      	subs	r3, #5
 80010b2:	61fb      	str	r3, [r7, #28]

		if(windowEnd>longitudVectorIn)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d201      	bcs.n	80010c0 <filtroVentana10+0x38>
			windowEnd = longitudVectorIn;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	61bb      	str	r3, [r7, #24]

		for(int j=windowStart;j<windowEnd;j++){
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e00b      	b.n	80010de <filtroVentana10+0x56>
			temp+=vectorIn[j];
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	6a3b      	ldr	r3, [r7, #32]
 80010d4:	4413      	add	r3, r2
 80010d6:	623b      	str	r3, [r7, #32]
		for(int j=windowStart;j<windowEnd;j++){
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	dbef      	blt.n	80010c6 <filtroVentana10+0x3e>
		}

		vectorOut[i]=(uint16_t) (temp/WINDOW_SIZE);
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <filtroVentana10+0x90>)
 80010ea:	fba2 2303 	umull	r2, r3, r2, r3
 80010ee:	08d9      	lsrs	r1, r3, #3
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	4413      	add	r3, r2
 80010f8:	b28a      	uxth	r2, r1
 80010fa:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<longitudVectorIn;i++){
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	3301      	adds	r3, #1
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	429a      	cmp	r2, r3
 8001108:	d8c7      	bhi.n	800109a <filtroVentana10+0x12>

	}
}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	372c      	adds	r7, #44	; 0x2c
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	ba2e8ba3 	.word	0xba2e8ba3

0800111c <pack32to16>:

void pack32to16 (int32_t * vectorIn, int16_t *vectorOut, uint32_t longitud){
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
	for(;longitud;longitud--){
 8001128:	e014      	b.n	8001154 <pack32to16+0x38>
		vectorOut[longitud-1]=(int16_t) ((vectorIn[longitud-1]&MASK_16_MSB_BITS)>>16); //usar shift con signo en asm
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001130:	3b01      	subs	r3, #1
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	0c19      	lsrs	r1, r3, #16
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001142:	3b01      	subs	r3, #1
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	4413      	add	r3, r2
 800114a:	b20a      	sxth	r2, r1
 800114c:	801a      	strh	r2, [r3, #0]
	for(;longitud;longitud--){
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3b01      	subs	r3, #1
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1e7      	bne.n	800112a <pack32to16+0xe>
	}
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <max>:

int32_t max (int32_t * vectorIn, uint32_t longitud){
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]

	int32_t maxValue = vectorIn[longitud-1];
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001178:	3b01      	subs	r3, #1
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	4413      	add	r3, r2
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	60fb      	str	r3, [r7, #12]
	int32_t maxIndex = longitud-1;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	3b01      	subs	r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
	longitud--;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	603b      	str	r3, [r7, #0]

	for(;longitud;longitud--){
 8001190:	e019      	b.n	80011c6 <max+0x5e>

		if(vectorIn[longitud-1]>maxValue){
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001198:	3b01      	subs	r3, #1
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	da0b      	bge.n	80011c0 <max+0x58>
			maxValue = vectorIn[longitud-1];
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011ae:	3b01      	subs	r3, #1
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
			maxIndex = longitud-1;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3b01      	subs	r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
	for(;longitud;longitud--){
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1e2      	bne.n	8001192 <max+0x2a>
		}
	}

	return maxIndex;
 80011cc:	68bb      	ldr	r3, [r7, #8]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <downsampleM>:

void downsampleM (int32_t * vectorIn, int32_t * vectorOut, uint32_t longitud, uint32_t N){
 80011da:	b480      	push	{r7}
 80011dc:	b089      	sub	sp, #36	; 0x24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	603b      	str	r3, [r7, #0]

	int sampleCounter=0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
	int currentInSample=0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
	int currentOutSample=0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

	do{
		if(sampleCounter==N-1){
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	1e5a      	subs	r2, r3, #1
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d104      	bne.n	8001208 <downsampleM+0x2e>
			sampleCounter=0;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
			currentInSample++;	//saltea muestra de entrada actual
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	3301      	adds	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
		}

		vectorOut[currentOutSample]=vectorIn[currentInSample];
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	441a      	add	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	440b      	add	r3, r1
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	601a      	str	r2, [r3, #0]
		sampleCounter++;
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	3301      	adds	r3, #1
 8001220:	61fb      	str	r3, [r7, #28]
		currentInSample++;
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	3301      	adds	r3, #1
 8001226:	61bb      	str	r3, [r7, #24]
		currentOutSample++;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]

	}while(currentInSample<longitud);
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	d8de      	bhi.n	80011f4 <downsampleM+0x1a>
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	3724      	adds	r7, #36	; 0x24
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <invertir>:

void invertir (uint16_t * vector, uint32_t longitud){
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
	uint16_t temp=0;
 800124e:	2300      	movs	r3, #0
 8001250:	817b      	strh	r3, [r7, #10]

	uint32_t flipTimes = longitud;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	60fb      	str	r3, [r7, #12]

	flipTimes &= ~0x1;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
	flipTimes = flipTimes>>1;		//Divido longitud en 2 para hacer un flip entre los valores del vector
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]

	do{
		temp = vector[flipTimes-1];
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800126a:	3b01      	subs	r3, #1
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	817b      	strh	r3, [r7, #10]
		vector[flipTimes-1]=vector[longitud-flipTimes];
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	441a      	add	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001288:	3b01      	subs	r3, #1
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	440b      	add	r3, r1
 8001290:	8812      	ldrh	r2, [r2, #0]
 8001292:	801a      	strh	r2, [r3, #0]
		vector[longitud-flipTimes] =temp;
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	897a      	ldrh	r2, [r7, #10]
 80012a2:	801a      	strh	r2, [r3, #0]
		flipTimes--;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]

	}while(flipTimes);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1d9      	bne.n	8001264 <invertir+0x20>

}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <addEcoVector>:

void addEcoVector(int16_t* vector,uint16_t longitud, uint16_t sampleDelay){
 80012be:	b480      	push	{r7}
 80012c0:	b085      	sub	sp, #20
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	807b      	strh	r3, [r7, #2]
 80012ca:	4613      	mov	r3, r2
 80012cc:	803b      	strh	r3, [r7, #0]

	for(int i=sampleDelay ; i<longitud ;i++){
 80012ce:	883b      	ldrh	r3, [r7, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	e01e      	b.n	8001312 <addEcoVector+0x54>
		vector[i] = vector[i-sampleDelay]/2 + vector[i];
 80012d4:	883b      	ldrh	r3, [r7, #0]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e4:	0fda      	lsrs	r2, r3, #31
 80012e6:	4413      	add	r3, r2
 80012e8:	105b      	asrs	r3, r3, #1
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	440b      	add	r3, r1
 80012f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	b299      	uxth	r1, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	b20a      	sxth	r2, r1
 800130a:	801a      	strh	r2, [r3, #0]
	for(int i=sampleDelay ; i<longitud ;i++){
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3301      	adds	r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	429a      	cmp	r2, r3
 8001318:	dbdc      	blt.n	80012d4 <addEcoVector+0x16>
	}
}
 800131a:	bf00      	nop
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001330:	e7fe      	b.n	8001330 <Error_Handler+0x8>
	...

08001334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_MspInit+0x4c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <HAL_MspInit+0x4c>)
 8001344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <HAL_MspInit+0x4c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_MspInit+0x4c>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08e      	sub	sp, #56	; 0x38
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a55      	ldr	r2, [pc, #340]	; (80014f8 <HAL_ETH_MspInit+0x174>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	f040 80a4 	bne.w	80014f0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
 80013ac:	4b53      	ldr	r3, [pc, #332]	; (80014fc <HAL_ETH_MspInit+0x178>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	4a52      	ldr	r2, [pc, #328]	; (80014fc <HAL_ETH_MspInit+0x178>)
 80013b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013b6:	6313      	str	r3, [r2, #48]	; 0x30
 80013b8:	4b50      	ldr	r3, [pc, #320]	; (80014fc <HAL_ETH_MspInit+0x178>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c0:	623b      	str	r3, [r7, #32]
 80013c2:	6a3b      	ldr	r3, [r7, #32]
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <HAL_ETH_MspInit+0x178>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	4a4b      	ldr	r2, [pc, #300]	; (80014fc <HAL_ETH_MspInit+0x178>)
 80013ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013d2:	6313      	str	r3, [r2, #48]	; 0x30
 80013d4:	4b49      	ldr	r3, [pc, #292]	; (80014fc <HAL_ETH_MspInit+0x178>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	4b45      	ldr	r3, [pc, #276]	; (80014fc <HAL_ETH_MspInit+0x178>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	4a44      	ldr	r2, [pc, #272]	; (80014fc <HAL_ETH_MspInit+0x178>)
 80013ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013ee:	6313      	str	r3, [r2, #48]	; 0x30
 80013f0:	4b42      	ldr	r3, [pc, #264]	; (80014fc <HAL_ETH_MspInit+0x178>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <HAL_ETH_MspInit+0x178>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	4a3d      	ldr	r2, [pc, #244]	; (80014fc <HAL_ETH_MspInit+0x178>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	6313      	str	r3, [r2, #48]	; 0x30
 800140c:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <HAL_ETH_MspInit+0x178>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	4b37      	ldr	r3, [pc, #220]	; (80014fc <HAL_ETH_MspInit+0x178>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	4a36      	ldr	r2, [pc, #216]	; (80014fc <HAL_ETH_MspInit+0x178>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6313      	str	r3, [r2, #48]	; 0x30
 8001428:	4b34      	ldr	r3, [pc, #208]	; (80014fc <HAL_ETH_MspInit+0x178>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_ETH_MspInit+0x178>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	4a2f      	ldr	r2, [pc, #188]	; (80014fc <HAL_ETH_MspInit+0x178>)
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	6313      	str	r3, [r2, #48]	; 0x30
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_ETH_MspInit+0x178>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	4b29      	ldr	r3, [pc, #164]	; (80014fc <HAL_ETH_MspInit+0x178>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a28      	ldr	r2, [pc, #160]	; (80014fc <HAL_ETH_MspInit+0x178>)
 800145a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145e:	6313      	str	r3, [r2, #48]	; 0x30
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_ETH_MspInit+0x178>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800146c:	2332      	movs	r3, #50	; 0x32
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800147c:	230b      	movs	r3, #11
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	481e      	ldr	r0, [pc, #120]	; (8001500 <HAL_ETH_MspInit+0x17c>)
 8001488:	f000 fe02 	bl	8002090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800148c:	2386      	movs	r3, #134	; 0x86
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800149c:	230b      	movs	r3, #11
 800149e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	4817      	ldr	r0, [pc, #92]	; (8001504 <HAL_ETH_MspInit+0x180>)
 80014a8:	f000 fdf2 	bl	8002090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014be:	230b      	movs	r3, #11
 80014c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	480f      	ldr	r0, [pc, #60]	; (8001508 <HAL_ETH_MspInit+0x184>)
 80014ca:	f000 fde1 	bl	8002090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014e0:	230b      	movs	r3, #11
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e8:	4619      	mov	r1, r3
 80014ea:	4808      	ldr	r0, [pc, #32]	; (800150c <HAL_ETH_MspInit+0x188>)
 80014ec:	f000 fdd0 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3738      	adds	r7, #56	; 0x38
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40028000 	.word	0x40028000
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020800 	.word	0x40020800
 8001504:	40020000 	.word	0x40020000
 8001508:	40020400 	.word	0x40020400
 800150c:	40021800 	.word	0x40021800

08001510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a19      	ldr	r2, [pc, #100]	; (8001594 <HAL_UART_MspInit+0x84>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d12c      	bne.n	800158c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <HAL_UART_MspInit+0x88>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a17      	ldr	r2, [pc, #92]	; (8001598 <HAL_UART_MspInit+0x88>)
 800153c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_UART_MspInit+0x88>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_UART_MspInit+0x88>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a10      	ldr	r2, [pc, #64]	; (8001598 <HAL_UART_MspInit+0x88>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_UART_MspInit+0x88>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800156a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800157c:	2307      	movs	r3, #7
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <HAL_UART_MspInit+0x8c>)
 8001588:	f000 fd82 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40004800 	.word	0x40004800
 8001598:	40023800 	.word	0x40023800
 800159c:	40020c00 	.word	0x40020c00

080015a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c0:	d13f      	bne.n	8001642 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <HAL_PCD_MspInit+0xac>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a20      	ldr	r2, [pc, #128]	; (800164c <HAL_PCD_MspInit+0xac>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <HAL_PCD_MspInit+0xac>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015de:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015f0:	230a      	movs	r3, #10
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4815      	ldr	r0, [pc, #84]	; (8001650 <HAL_PCD_MspInit+0xb0>)
 80015fc:	f000 fd48 	bl	8002090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	480e      	ldr	r0, [pc, #56]	; (8001650 <HAL_PCD_MspInit+0xb0>)
 8001616:	f000 fd3b 	bl	8002090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_PCD_MspInit+0xac>)
 800161c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <HAL_PCD_MspInit+0xac>)
 8001620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001624:	6353      	str	r3, [r2, #52]	; 0x34
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_PCD_MspInit+0xac>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_PCD_MspInit+0xac>)
 8001630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_PCD_MspInit+0xac>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <NMI_Handler+0x4>

0800165a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <MemManage_Handler+0x4>

08001666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <UsageFault_Handler+0x4>

08001672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	b085      	sub	sp, #20
 8001676:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001678:	f3ef 8314 	mrs	r3, CONTROL
 800167c:	607b      	str	r3, [r7, #4]
  return(result);
 800167e:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 8001680:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	f383 8814 	msr	CONTROL, r3
}
 8001694:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c2:	f000 f893 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <SystemInit+0x20>)
 80016d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <SystemInit+0x20>)
 80016d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 80016f0:	bf00      	nop
  nop
 80016f2:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800172c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016fa:	490e      	ldr	r1, [pc, #56]	; (8001734 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001710:	4c0b      	ldr	r4, [pc, #44]	; (8001740 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800171e:	f7ff ffd5 	bl	80016cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001722:	f002 f9f3 	bl	8003b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001726:	f7fe ffd3 	bl	80006d0 <main>
  bx  lr    
 800172a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800172c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001734:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001738:	08003cc0 	.word	0x08003cc0
  ldr r2, =_sbss
 800173c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001740:	200007ac 	.word	0x200007ac

08001744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC_IRQHandler>
	...

08001748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <HAL_Init+0x40>)
 8001752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001756:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_Init+0x40>)
 800175e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001762:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_Init+0x40>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f000 f931 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f808 	bl	800178c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800177c:	f7ff fdda 	bl	8001334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_InitTick+0x54>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x58>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f93b 	bl	8001a26 <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d80a      	bhi.n	80017d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f000 f911 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_InitTick+0x5c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008
 8001810:	200007a8 	.word	0x200007a8

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	200007a8 	.word	0x200007a8

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_Delay+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001852:	bf00      	nop
 8001854:	f7ff ffde 	bl	8001814 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000008 	.word	0x20000008

08001874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800189c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <__NVIC_GetPriorityGrouping+0x18>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	f003 0307 	and.w	r3, r3, #7
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	; (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	; (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff47 	bl	8001874 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff5c 	bl	80018bc <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffb0 	bl	8001994 <SysTick_Config>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e06c      	b.n	8001b2c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d106      	bne.n	8001a6a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2223      	movs	r2, #35	; 0x23
 8001a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff fc8d 	bl	8001384 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	4b31      	ldr	r3, [pc, #196]	; (8001b34 <HAL_ETH_Init+0xf4>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a30      	ldr	r2, [pc, #192]	; (8001b34 <HAL_ETH_Init+0xf4>)
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_ETH_Init+0xf4>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a86:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <HAL_ETH_Init+0xf8>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a2b      	ldr	r2, [pc, #172]	; (8001b38 <HAL_ETH_Init+0xf8>)
 8001a8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a90:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <HAL_ETH_Init+0xf8>)
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	4927      	ldr	r1, [pc, #156]	; (8001b38 <HAL_ETH_Init+0xf8>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_ETH_Init+0xf8>)
 8001aa2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001abc:	f7ff feaa 	bl	8001814 <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ac2:	e011      	b.n	8001ae8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ac4:	f7ff fea6 	bl	8001814 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ad2:	d909      	bls.n	8001ae8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	22e0      	movs	r2, #224	; 0xe0
 8001ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e021      	b.n	8001b2c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1e4      	bne.n	8001ac4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f958 	bl	8001db0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f9ff 	bl	8001f04 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fa55 	bl	8001fb6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	461a      	mov	r2, r3
 8001b12:	2100      	movs	r1, #0
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f9bd 	bl	8001e94 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2210      	movs	r2, #16
 8001b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40013800 	.word	0x40013800

08001b3c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	4b51      	ldr	r3, [pc, #324]	; (8001c98 <ETH_SetMACConfig+0x15c>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	7c1b      	ldrb	r3, [r3, #16]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d102      	bne.n	8001b64 <ETH_SetMACConfig+0x28>
 8001b5e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b62:	e000      	b.n	8001b66 <ETH_SetMACConfig+0x2a>
 8001b64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	7c5b      	ldrb	r3, [r3, #17]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <ETH_SetMACConfig+0x38>
 8001b6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b72:	e000      	b.n	8001b76 <ETH_SetMACConfig+0x3a>
 8001b74:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b76:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	7fdb      	ldrb	r3, [r3, #31]
 8001b82:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001b84:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	7f92      	ldrb	r2, [r2, #30]
 8001b90:	2a00      	cmp	r2, #0
 8001b92:	d102      	bne.n	8001b9a <ETH_SetMACConfig+0x5e>
 8001b94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b98:	e000      	b.n	8001b9c <ETH_SetMACConfig+0x60>
 8001b9a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001b9c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	7f1b      	ldrb	r3, [r3, #28]
 8001ba2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ba4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001baa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	791b      	ldrb	r3, [r3, #4]
 8001bb0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001bb2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001bba:	2a00      	cmp	r2, #0
 8001bbc:	d102      	bne.n	8001bc4 <ETH_SetMACConfig+0x88>
 8001bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc2:	e000      	b.n	8001bc6 <ETH_SetMACConfig+0x8a>
 8001bc4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001bc6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	7bdb      	ldrb	r3, [r3, #15]
 8001bcc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001bce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001bd4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bdc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bde:	4313      	orrs	r3, r2
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f7ff fe18 	bl	800182c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c12:	4013      	ands	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001c22:	2a00      	cmp	r2, #0
 8001c24:	d101      	bne.n	8001c2a <ETH_SetMACConfig+0xee>
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	e000      	b.n	8001c2c <ETH_SetMACConfig+0xf0>
 8001c2a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c2c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001c3a:	2a01      	cmp	r2, #1
 8001c3c:	d101      	bne.n	8001c42 <ETH_SetMACConfig+0x106>
 8001c3e:	2208      	movs	r2, #8
 8001c40:	e000      	b.n	8001c44 <ETH_SetMACConfig+0x108>
 8001c42:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001c44:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001c4c:	2a01      	cmp	r2, #1
 8001c4e:	d101      	bne.n	8001c54 <ETH_SetMACConfig+0x118>
 8001c50:	2204      	movs	r2, #4
 8001c52:	e000      	b.n	8001c56 <ETH_SetMACConfig+0x11a>
 8001c54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001c5e:	2a01      	cmp	r2, #1
 8001c60:	d101      	bne.n	8001c66 <ETH_SetMACConfig+0x12a>
 8001c62:	2202      	movs	r2, #2
 8001c64:	e000      	b.n	8001c68 <ETH_SetMACConfig+0x12c>
 8001c66:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f7ff fdd3 	bl	800182c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	619a      	str	r2, [r3, #24]
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	ff20810f 	.word	0xff20810f

08001c9c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <ETH_SetDMAConfig+0x110>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	7b1b      	ldrb	r3, [r3, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <ETH_SetDMAConfig+0x2c>
 8001cc2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cc6:	e000      	b.n	8001cca <ETH_SetDMAConfig+0x2e>
 8001cc8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	7b5b      	ldrb	r3, [r3, #13]
 8001cce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cd0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	7f52      	ldrb	r2, [r2, #29]
 8001cd6:	2a00      	cmp	r2, #0
 8001cd8:	d102      	bne.n	8001ce0 <ETH_SetDMAConfig+0x44>
 8001cda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cde:	e000      	b.n	8001ce2 <ETH_SetDMAConfig+0x46>
 8001ce0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ce2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	7b9b      	ldrb	r3, [r3, #14]
 8001ce8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001cea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001cf0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	7f1b      	ldrb	r3, [r3, #28]
 8001cf6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001cf8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	7f9b      	ldrb	r3, [r3, #30]
 8001cfe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d00:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d06:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d0e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d10:	4313      	orrs	r3, r2
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d20:	461a      	mov	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff fd7a 	bl	800182c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d40:	461a      	mov	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	791b      	ldrb	r3, [r3, #4]
 8001d4a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d50:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001d56:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d5c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d64:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001d66:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d6e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d74:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d82:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d90:	2001      	movs	r0, #1
 8001d92:	f7ff fd4b 	bl	800182c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	f8de3f23 	.word	0xf8de3f23

08001db0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0a6      	sub	sp, #152	; 0x98
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001db8:	2301      	movs	r3, #1
 8001dba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001dec:	2300      	movs	r3, #0
 8001dee:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e16:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e28:	4619      	mov	r1, r3
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff fe86 	bl	8001b3c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001e30:	2301      	movs	r3, #1
 8001e32:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001e34:	2301      	movs	r3, #1
 8001e36:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e64:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e6a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e70:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e80:	f107 0308 	add.w	r3, r7, #8
 8001e84:	4619      	mov	r1, r3
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ff08 	bl	8001c9c <ETH_SetDMAConfig>
}
 8001e8c:	bf00      	nop
 8001e8e:	3798      	adds	r7, #152	; 0x98
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3305      	adds	r3, #5
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	3204      	adds	r2, #4
 8001eac:	7812      	ldrb	r2, [r2, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <ETH_MACAddressConfig+0x68>)
 8001eb6:	4413      	add	r3, r2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3303      	adds	r3, #3
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	061a      	lsls	r2, r3, #24
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3302      	adds	r3, #2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	7812      	ldrb	r2, [r2, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <ETH_MACAddressConfig+0x6c>)
 8001ee6:	4413      	add	r3, r2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	6013      	str	r3, [r2, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40028040 	.word	0x40028040
 8001f00:	40028044 	.word	0x40028044

08001f04 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	e03e      	b.n	8001f90 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68d9      	ldr	r1, [r3, #12]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	440b      	add	r3, r1
 8001f22:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	3206      	adds	r2, #6
 8001f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d80c      	bhi.n	8001f74 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68d9      	ldr	r1, [r3, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	e004      	b.n	8001f7e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d9bd      	bls.n	8001f12 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa8:	611a      	str	r2, [r3, #16]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b085      	sub	sp, #20
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	e046      	b.n	8002052 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6919      	ldr	r1, [r3, #16]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	440b      	add	r3, r1
 8001fd4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002000:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002008:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002016:	68b9      	ldr	r1, [r7, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	3212      	adds	r2, #18
 800201e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d80c      	bhi.n	8002042 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6919      	ldr	r1, [r3, #16]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	461a      	mov	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	e004      	b.n	800204c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	461a      	mov	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	3301      	adds	r3, #1
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d9b5      	bls.n	8001fc4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002082:	60da      	str	r2, [r3, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e177      	b.n	800239c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 8166 	bne.w	8002396 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d005      	beq.n	80020e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d130      	bne.n	8002144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002118:	2201      	movs	r2, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 0201 	and.w	r2, r3, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b03      	cmp	r3, #3
 800214e:	d017      	beq.n	8002180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d123      	bne.n	80021d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	220f      	movs	r2, #15
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	08da      	lsrs	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3208      	adds	r2, #8
 80021ce:	69b9      	ldr	r1, [r7, #24]
 80021d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0203 	and.w	r2, r3, #3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80c0 	beq.w	8002396 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b66      	ldr	r3, [pc, #408]	; (80023b4 <HAL_GPIO_Init+0x324>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	4a65      	ldr	r2, [pc, #404]	; (80023b4 <HAL_GPIO_Init+0x324>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002224:	6453      	str	r3, [r2, #68]	; 0x44
 8002226:	4b63      	ldr	r3, [pc, #396]	; (80023b4 <HAL_GPIO_Init+0x324>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002232:	4a61      	ldr	r2, [pc, #388]	; (80023b8 <HAL_GPIO_Init+0x328>)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_GPIO_Init+0x32c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d037      	beq.n	80022ce <HAL_GPIO_Init+0x23e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a57      	ldr	r2, [pc, #348]	; (80023c0 <HAL_GPIO_Init+0x330>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d031      	beq.n	80022ca <HAL_GPIO_Init+0x23a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a56      	ldr	r2, [pc, #344]	; (80023c4 <HAL_GPIO_Init+0x334>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d02b      	beq.n	80022c6 <HAL_GPIO_Init+0x236>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a55      	ldr	r2, [pc, #340]	; (80023c8 <HAL_GPIO_Init+0x338>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d025      	beq.n	80022c2 <HAL_GPIO_Init+0x232>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a54      	ldr	r2, [pc, #336]	; (80023cc <HAL_GPIO_Init+0x33c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01f      	beq.n	80022be <HAL_GPIO_Init+0x22e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a53      	ldr	r2, [pc, #332]	; (80023d0 <HAL_GPIO_Init+0x340>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d019      	beq.n	80022ba <HAL_GPIO_Init+0x22a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a52      	ldr	r2, [pc, #328]	; (80023d4 <HAL_GPIO_Init+0x344>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <HAL_GPIO_Init+0x226>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a51      	ldr	r2, [pc, #324]	; (80023d8 <HAL_GPIO_Init+0x348>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00d      	beq.n	80022b2 <HAL_GPIO_Init+0x222>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a50      	ldr	r2, [pc, #320]	; (80023dc <HAL_GPIO_Init+0x34c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <HAL_GPIO_Init+0x21e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4f      	ldr	r2, [pc, #316]	; (80023e0 <HAL_GPIO_Init+0x350>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_GPIO_Init+0x21a>
 80022a6:	2309      	movs	r3, #9
 80022a8:	e012      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022aa:	230a      	movs	r3, #10
 80022ac:	e010      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ae:	2308      	movs	r3, #8
 80022b0:	e00e      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022b2:	2307      	movs	r3, #7
 80022b4:	e00c      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022b6:	2306      	movs	r3, #6
 80022b8:	e00a      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ba:	2305      	movs	r3, #5
 80022bc:	e008      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022be:	2304      	movs	r3, #4
 80022c0:	e006      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022c2:	2303      	movs	r3, #3
 80022c4:	e004      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e002      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ce:	2300      	movs	r3, #0
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f002 0203 	and.w	r2, r2, #3
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	4093      	lsls	r3, r2
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e0:	4935      	ldr	r1, [pc, #212]	; (80023b8 <HAL_GPIO_Init+0x328>)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3302      	adds	r3, #2
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <HAL_GPIO_Init+0x354>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002312:	4a34      	ldr	r2, [pc, #208]	; (80023e4 <HAL_GPIO_Init+0x354>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002318:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <HAL_GPIO_Init+0x354>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800233c:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <HAL_GPIO_Init+0x354>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002342:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <HAL_GPIO_Init+0x354>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002366:	4a1f      	ldr	r2, [pc, #124]	; (80023e4 <HAL_GPIO_Init+0x354>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_GPIO_Init+0x354>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002390:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <HAL_GPIO_Init+0x354>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3301      	adds	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b0f      	cmp	r3, #15
 80023a0:	f67f ae84 	bls.w	80020ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3724      	adds	r7, #36	; 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40013800 	.word	0x40013800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40020800 	.word	0x40020800
 80023c8:	40020c00 	.word	0x40020c00
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40021400 	.word	0x40021400
 80023d4:	40021800 	.word	0x40021800
 80023d8:	40021c00 	.word	0x40021c00
 80023dc:	40022000 	.word	0x40022000
 80023e0:	40022400 	.word	0x40022400
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f8:	787b      	ldrb	r3, [r7, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002404:	e003      	b.n	800240e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	041a      	lsls	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800241a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241c:	b08f      	sub	sp, #60	; 0x3c
 800241e:	af0a      	add	r7, sp, #40	; 0x28
 8002420:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e10f      	b.n	800264c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff f8aa 	bl	80015a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2203      	movs	r2, #3
 8002450:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f001 f8ad 	bl	80035ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	603b      	str	r3, [r7, #0]
 8002476:	687e      	ldr	r6, [r7, #4]
 8002478:	466d      	mov	r5, sp
 800247a:	f106 0410 	add.w	r4, r6, #16
 800247e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002480:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002486:	e894 0003 	ldmia.w	r4, {r0, r1}
 800248a:	e885 0003 	stmia.w	r5, {r0, r1}
 800248e:	1d33      	adds	r3, r6, #4
 8002490:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002492:	6838      	ldr	r0, [r7, #0]
 8002494:	f001 f838 	bl	8003508 <USB_CoreInit>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2202      	movs	r2, #2
 80024a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0d0      	b.n	800264c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f001 f89b 	bl	80035ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	e04a      	b.n	8002552 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	333d      	adds	r3, #61	; 0x3d
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	333c      	adds	r3, #60	; 0x3c
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	b298      	uxth	r0, r3
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	3344      	adds	r3, #68	; 0x44
 80024f8:	4602      	mov	r2, r0
 80024fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	3340      	adds	r3, #64	; 0x40
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3348      	adds	r3, #72	; 0x48
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	334c      	adds	r3, #76	; 0x4c
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3354      	adds	r3, #84	; 0x54
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	3301      	adds	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
 8002552:	7bfa      	ldrb	r2, [r7, #15]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	d3af      	bcc.n	80024bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]
 8002560:	e044      	b.n	80025ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	3301      	adds	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d3b5      	bcc.n	8002562 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	687e      	ldr	r6, [r7, #4]
 80025fe:	466d      	mov	r5, sp
 8002600:	f106 0410 	add.w	r4, r6, #16
 8002604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800260a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800260c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002610:	e885 0003 	stmia.w	r5, {r0, r1}
 8002614:	1d33      	adds	r3, r6, #4
 8002616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002618:	6838      	ldr	r0, [r7, #0]
 800261a:	f001 f833 	bl	8003684 <USB_DevInit>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e00d      	b.n	800264c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f001 f9fe 	bl	8003a46 <USB_DevDisconnect>

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e267      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d075      	beq.n	800275e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002672:	4b88      	ldr	r3, [pc, #544]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b04      	cmp	r3, #4
 800267c:	d00c      	beq.n	8002698 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267e:	4b85      	ldr	r3, [pc, #532]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002686:	2b08      	cmp	r3, #8
 8002688:	d112      	bne.n	80026b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800268a:	4b82      	ldr	r3, [pc, #520]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002696:	d10b      	bne.n	80026b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	4b7e      	ldr	r3, [pc, #504]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d05b      	beq.n	800275c <HAL_RCC_OscConfig+0x108>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d157      	bne.n	800275c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e242      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b8:	d106      	bne.n	80026c8 <HAL_RCC_OscConfig+0x74>
 80026ba:	4b76      	ldr	r3, [pc, #472]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a75      	ldr	r2, [pc, #468]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e01d      	b.n	8002704 <HAL_RCC_OscConfig+0xb0>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x98>
 80026d2:	4b70      	ldr	r3, [pc, #448]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6f      	ldr	r2, [pc, #444]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b6d      	ldr	r3, [pc, #436]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a6c      	ldr	r2, [pc, #432]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e00b      	b.n	8002704 <HAL_RCC_OscConfig+0xb0>
 80026ec:	4b69      	ldr	r3, [pc, #420]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a68      	ldr	r2, [pc, #416]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4b66      	ldr	r3, [pc, #408]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a65      	ldr	r2, [pc, #404]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d013      	beq.n	8002734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7ff f882 	bl	8001814 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002714:	f7ff f87e 	bl	8001814 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	; 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e207      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	4b5b      	ldr	r3, [pc, #364]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0xc0>
 8002732:	e014      	b.n	800275e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7ff f86e 	bl	8001814 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800273c:	f7ff f86a 	bl	8001814 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e1f3      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274e:	4b51      	ldr	r3, [pc, #324]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0xe8>
 800275a:	e000      	b.n	800275e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d063      	beq.n	8002832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800276a:	4b4a      	ldr	r3, [pc, #296]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002776:	4b47      	ldr	r3, [pc, #284]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800277e:	2b08      	cmp	r3, #8
 8002780:	d11c      	bne.n	80027bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002782:	4b44      	ldr	r3, [pc, #272]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d116      	bne.n	80027bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278e:	4b41      	ldr	r3, [pc, #260]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <HAL_RCC_OscConfig+0x152>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d001      	beq.n	80027a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e1c7      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a6:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4937      	ldr	r1, [pc, #220]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	e03a      	b.n	8002832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d020      	beq.n	8002806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c4:	4b34      	ldr	r3, [pc, #208]	; (8002898 <HAL_RCC_OscConfig+0x244>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7ff f823 	bl	8001814 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d2:	f7ff f81f 	bl	8001814 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e1a8      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e4:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f0:	4b28      	ldr	r3, [pc, #160]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4925      	ldr	r1, [pc, #148]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]
 8002804:	e015      	b.n	8002832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002806:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_RCC_OscConfig+0x244>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7ff f802 	bl	8001814 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002814:	f7fe fffe 	bl	8001814 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e187      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002826:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d036      	beq.n	80028ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d016      	beq.n	8002874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_RCC_OscConfig+0x248>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7fe ffe2 	bl	8001814 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002854:	f7fe ffde 	bl	8001814 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e167      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x200>
 8002872:	e01b      	b.n	80028ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <HAL_RCC_OscConfig+0x248>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287a:	f7fe ffcb 	bl	8001814 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002880:	e00e      	b.n	80028a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002882:	f7fe ffc7 	bl	8001814 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d907      	bls.n	80028a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e150      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
 8002894:	40023800 	.word	0x40023800
 8002898:	42470000 	.word	0x42470000
 800289c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a0:	4b88      	ldr	r3, [pc, #544]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80028a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ea      	bne.n	8002882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 8097 	beq.w	80029e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028be:	4b81      	ldr	r3, [pc, #516]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10f      	bne.n	80028ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	4b7d      	ldr	r3, [pc, #500]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	4a7c      	ldr	r2, [pc, #496]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80028d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d8:	6413      	str	r3, [r2, #64]	; 0x40
 80028da:	4b7a      	ldr	r3, [pc, #488]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e6:	2301      	movs	r3, #1
 80028e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ea:	4b77      	ldr	r3, [pc, #476]	; (8002ac8 <HAL_RCC_OscConfig+0x474>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d118      	bne.n	8002928 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f6:	4b74      	ldr	r3, [pc, #464]	; (8002ac8 <HAL_RCC_OscConfig+0x474>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a73      	ldr	r2, [pc, #460]	; (8002ac8 <HAL_RCC_OscConfig+0x474>)
 80028fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002902:	f7fe ff87 	bl	8001814 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290a:	f7fe ff83 	bl	8001814 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e10c      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291c:	4b6a      	ldr	r3, [pc, #424]	; (8002ac8 <HAL_RCC_OscConfig+0x474>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d106      	bne.n	800293e <HAL_RCC_OscConfig+0x2ea>
 8002930:	4b64      	ldr	r3, [pc, #400]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	4a63      	ldr	r2, [pc, #396]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6713      	str	r3, [r2, #112]	; 0x70
 800293c:	e01c      	b.n	8002978 <HAL_RCC_OscConfig+0x324>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b05      	cmp	r3, #5
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x30c>
 8002946:	4b5f      	ldr	r3, [pc, #380]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	4a5e      	ldr	r2, [pc, #376]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 800294c:	f043 0304 	orr.w	r3, r3, #4
 8002950:	6713      	str	r3, [r2, #112]	; 0x70
 8002952:	4b5c      	ldr	r3, [pc, #368]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	4a5b      	ldr	r2, [pc, #364]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6713      	str	r3, [r2, #112]	; 0x70
 800295e:	e00b      	b.n	8002978 <HAL_RCC_OscConfig+0x324>
 8002960:	4b58      	ldr	r3, [pc, #352]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a57      	ldr	r2, [pc, #348]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002966:	f023 0301 	bic.w	r3, r3, #1
 800296a:	6713      	str	r3, [r2, #112]	; 0x70
 800296c:	4b55      	ldr	r3, [pc, #340]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	4a54      	ldr	r2, [pc, #336]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002972:	f023 0304 	bic.w	r3, r3, #4
 8002976:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d015      	beq.n	80029ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7fe ff48 	bl	8001814 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002986:	e00a      	b.n	800299e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7fe ff44 	bl	8001814 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0cb      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299e:	4b49      	ldr	r3, [pc, #292]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0ee      	beq.n	8002988 <HAL_RCC_OscConfig+0x334>
 80029aa:	e014      	b.n	80029d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ac:	f7fe ff32 	bl	8001814 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b4:	f7fe ff2e 	bl	8001814 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0b5      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ca:	4b3e      	ldr	r3, [pc, #248]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1ee      	bne.n	80029b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d6:	7dfb      	ldrb	r3, [r7, #23]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d105      	bne.n	80029e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029dc:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	4a38      	ldr	r2, [pc, #224]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80029e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80a1 	beq.w	8002b34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029f2:	4b34      	ldr	r3, [pc, #208]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d05c      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d141      	bne.n	8002a8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a06:	4b31      	ldr	r3, [pc, #196]	; (8002acc <HAL_RCC_OscConfig+0x478>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7fe ff02 	bl	8001814 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe fefe 	bl	8001814 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e087      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a26:	4b27      	ldr	r3, [pc, #156]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	019b      	lsls	r3, r3, #6
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	041b      	lsls	r3, r3, #16
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	491b      	ldr	r1, [pc, #108]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_RCC_OscConfig+0x478>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7fe fed7 	bl	8001814 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6a:	f7fe fed3 	bl	8001814 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e05c      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x416>
 8002a88:	e054      	b.n	8002b34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <HAL_RCC_OscConfig+0x478>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a90:	f7fe fec0 	bl	8001814 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a98:	f7fe febc 	bl	8001814 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e045      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x444>
 8002ab6:	e03d      	b.n	8002b34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d107      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e038      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40007000 	.word	0x40007000
 8002acc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x4ec>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d028      	beq.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d121      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d11a      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b00:	4013      	ands	r3, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d111      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800

08002b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0cc      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b58:	4b68      	ldr	r3, [pc, #416]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d90c      	bls.n	8002b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b65      	ldr	r3, [pc, #404]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b63      	ldr	r3, [pc, #396]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0b8      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d020      	beq.n	8002bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b98:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a58      	ldr	r2, [pc, #352]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb0:	4b53      	ldr	r3, [pc, #332]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a52      	ldr	r2, [pc, #328]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bbc:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	494d      	ldr	r1, [pc, #308]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d044      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d119      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e07f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d003      	beq.n	8002c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c02:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e06f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e067      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c22:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 0203 	bic.w	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4934      	ldr	r1, [pc, #208]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c34:	f7fe fdee 	bl	8001814 <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3c:	f7fe fdea 	bl	8001814 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e04f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 020c 	and.w	r2, r3, #12
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d1eb      	bne.n	8002c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c64:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d20c      	bcs.n	8002c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e032      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4916      	ldr	r1, [pc, #88]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d009      	beq.n	8002cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	490e      	ldr	r1, [pc, #56]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cca:	f000 f821 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	490a      	ldr	r1, [pc, #40]	; (8002d04 <HAL_RCC_ClockConfig+0x1c0>)
 8002cdc:	5ccb      	ldrb	r3, [r1, r3]
 8002cde:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce2:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe fd4e 	bl	800178c <HAL_InitTick>

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023c00 	.word	0x40023c00
 8002d00:	40023800 	.word	0x40023800
 8002d04:	08003c98 	.word	0x08003c98
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	20000004 	.word	0x20000004

08002d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d14:	b094      	sub	sp, #80	; 0x50
 8002d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d20:	2300      	movs	r3, #0
 8002d22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d28:	4b79      	ldr	r3, [pc, #484]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 030c 	and.w	r3, r3, #12
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d00d      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x40>
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	f200 80e1 	bhi.w	8002efc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x34>
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d003      	beq.n	8002d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d42:	e0db      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d44:	4b73      	ldr	r3, [pc, #460]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d48:	e0db      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d4a:	4b73      	ldr	r3, [pc, #460]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d4e:	e0d8      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d50:	4b6f      	ldr	r3, [pc, #444]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d5a:	4b6d      	ldr	r3, [pc, #436]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d063      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d66:	4b6a      	ldr	r3, [pc, #424]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	099b      	lsrs	r3, r3, #6
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d78:	633b      	str	r3, [r7, #48]	; 0x30
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d82:	4622      	mov	r2, r4
 8002d84:	462b      	mov	r3, r5
 8002d86:	f04f 0000 	mov.w	r0, #0
 8002d8a:	f04f 0100 	mov.w	r1, #0
 8002d8e:	0159      	lsls	r1, r3, #5
 8002d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d94:	0150      	lsls	r0, r2, #5
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	1a51      	subs	r1, r2, r1
 8002d9e:	6139      	str	r1, [r7, #16]
 8002da0:	4629      	mov	r1, r5
 8002da2:	eb63 0301 	sbc.w	r3, r3, r1
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002db4:	4659      	mov	r1, fp
 8002db6:	018b      	lsls	r3, r1, #6
 8002db8:	4651      	mov	r1, sl
 8002dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dbe:	4651      	mov	r1, sl
 8002dc0:	018a      	lsls	r2, r1, #6
 8002dc2:	4651      	mov	r1, sl
 8002dc4:	ebb2 0801 	subs.w	r8, r2, r1
 8002dc8:	4659      	mov	r1, fp
 8002dca:	eb63 0901 	sbc.w	r9, r3, r1
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002de2:	4690      	mov	r8, r2
 8002de4:	4699      	mov	r9, r3
 8002de6:	4623      	mov	r3, r4
 8002de8:	eb18 0303 	adds.w	r3, r8, r3
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	462b      	mov	r3, r5
 8002df0:	eb49 0303 	adc.w	r3, r9, r3
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e02:	4629      	mov	r1, r5
 8002e04:	024b      	lsls	r3, r1, #9
 8002e06:	4621      	mov	r1, r4
 8002e08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	024a      	lsls	r2, r1, #9
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e16:	2200      	movs	r2, #0
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e20:	f7fd faa2 	bl	8000368 <__aeabi_uldivmod>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4613      	mov	r3, r2
 8002e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e2c:	e058      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2e:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	099b      	lsrs	r3, r3, #6
 8002e34:	2200      	movs	r2, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	4611      	mov	r1, r2
 8002e3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e3e:	623b      	str	r3, [r7, #32]
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
 8002e44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e48:	4642      	mov	r2, r8
 8002e4a:	464b      	mov	r3, r9
 8002e4c:	f04f 0000 	mov.w	r0, #0
 8002e50:	f04f 0100 	mov.w	r1, #0
 8002e54:	0159      	lsls	r1, r3, #5
 8002e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e5a:	0150      	lsls	r0, r2, #5
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4641      	mov	r1, r8
 8002e62:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e66:	4649      	mov	r1, r9
 8002e68:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e80:	ebb2 040a 	subs.w	r4, r2, sl
 8002e84:	eb63 050b 	sbc.w	r5, r3, fp
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	00eb      	lsls	r3, r5, #3
 8002e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e96:	00e2      	lsls	r2, r4, #3
 8002e98:	4614      	mov	r4, r2
 8002e9a:	461d      	mov	r5, r3
 8002e9c:	4643      	mov	r3, r8
 8002e9e:	18e3      	adds	r3, r4, r3
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	464b      	mov	r3, r9
 8002ea4:	eb45 0303 	adc.w	r3, r5, r3
 8002ea8:	607b      	str	r3, [r7, #4]
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	028b      	lsls	r3, r1, #10
 8002eba:	4621      	mov	r1, r4
 8002ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	028a      	lsls	r2, r1, #10
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eca:	2200      	movs	r2, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	61fa      	str	r2, [r7, #28]
 8002ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed4:	f7fd fa48 	bl	8000368 <__aeabi_uldivmod>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4613      	mov	r3, r2
 8002ede:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	0c1b      	lsrs	r3, r3, #16
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	3301      	adds	r3, #1
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002efa:	e002      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002efe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3750      	adds	r7, #80	; 0x50
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800
 8002f14:	00f42400 	.word	0x00f42400
 8002f18:	007a1200 	.word	0x007a1200

08002f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000000 	.word	0x20000000

08002f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f38:	f7ff fff0 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	0a9b      	lsrs	r3, r3, #10
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	4903      	ldr	r1, [pc, #12]	; (8002f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40023800 	.word	0x40023800
 8002f58:	08003ca8 	.word	0x08003ca8

08002f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f60:	f7ff ffdc 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	0b5b      	lsrs	r3, r3, #13
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	4903      	ldr	r1, [pc, #12]	; (8002f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f72:	5ccb      	ldrb	r3, [r1, r3]
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	08003ca8 	.word	0x08003ca8

08002f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e03f      	b.n	8003016 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fe fab0 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2224      	movs	r2, #36	; 0x24
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f829 	bl	8003020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003024:	b0c0      	sub	sp, #256	; 0x100
 8003026:	af00      	add	r7, sp, #0
 8003028:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303c:	68d9      	ldr	r1, [r3, #12]
 800303e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	ea40 0301 	orr.w	r3, r0, r1
 8003048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800304a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	431a      	orrs	r2, r3
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	431a      	orrs	r2, r3
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003078:	f021 010c 	bic.w	r1, r1, #12
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003086:	430b      	orrs	r3, r1
 8003088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800308a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309a:	6999      	ldr	r1, [r3, #24]
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	ea40 0301 	orr.w	r3, r0, r1
 80030a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4b8f      	ldr	r3, [pc, #572]	; (80032ec <UART_SetConfig+0x2cc>)
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d005      	beq.n	80030c0 <UART_SetConfig+0xa0>
 80030b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4b8d      	ldr	r3, [pc, #564]	; (80032f0 <UART_SetConfig+0x2d0>)
 80030bc:	429a      	cmp	r2, r3
 80030be:	d104      	bne.n	80030ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030c0:	f7ff ff4c 	bl	8002f5c <HAL_RCC_GetPCLK2Freq>
 80030c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030c8:	e003      	b.n	80030d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030ca:	f7ff ff33 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 80030ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030dc:	f040 810c 	bne.w	80032f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030e4:	2200      	movs	r2, #0
 80030e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030f2:	4622      	mov	r2, r4
 80030f4:	462b      	mov	r3, r5
 80030f6:	1891      	adds	r1, r2, r2
 80030f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80030fa:	415b      	adcs	r3, r3
 80030fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003102:	4621      	mov	r1, r4
 8003104:	eb12 0801 	adds.w	r8, r2, r1
 8003108:	4629      	mov	r1, r5
 800310a:	eb43 0901 	adc.w	r9, r3, r1
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800311a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800311e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003122:	4690      	mov	r8, r2
 8003124:	4699      	mov	r9, r3
 8003126:	4623      	mov	r3, r4
 8003128:	eb18 0303 	adds.w	r3, r8, r3
 800312c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003130:	462b      	mov	r3, r5
 8003132:	eb49 0303 	adc.w	r3, r9, r3
 8003136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800313a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003146:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800314a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800314e:	460b      	mov	r3, r1
 8003150:	18db      	adds	r3, r3, r3
 8003152:	653b      	str	r3, [r7, #80]	; 0x50
 8003154:	4613      	mov	r3, r2
 8003156:	eb42 0303 	adc.w	r3, r2, r3
 800315a:	657b      	str	r3, [r7, #84]	; 0x54
 800315c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003160:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003164:	f7fd f900 	bl	8000368 <__aeabi_uldivmod>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4b61      	ldr	r3, [pc, #388]	; (80032f4 <UART_SetConfig+0x2d4>)
 800316e:	fba3 2302 	umull	r2, r3, r3, r2
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	011c      	lsls	r4, r3, #4
 8003176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800317a:	2200      	movs	r2, #0
 800317c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003180:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003184:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003188:	4642      	mov	r2, r8
 800318a:	464b      	mov	r3, r9
 800318c:	1891      	adds	r1, r2, r2
 800318e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003190:	415b      	adcs	r3, r3
 8003192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003194:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003198:	4641      	mov	r1, r8
 800319a:	eb12 0a01 	adds.w	sl, r2, r1
 800319e:	4649      	mov	r1, r9
 80031a0:	eb43 0b01 	adc.w	fp, r3, r1
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031b8:	4692      	mov	sl, r2
 80031ba:	469b      	mov	fp, r3
 80031bc:	4643      	mov	r3, r8
 80031be:	eb1a 0303 	adds.w	r3, sl, r3
 80031c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031c6:	464b      	mov	r3, r9
 80031c8:	eb4b 0303 	adc.w	r3, fp, r3
 80031cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031e4:	460b      	mov	r3, r1
 80031e6:	18db      	adds	r3, r3, r3
 80031e8:	643b      	str	r3, [r7, #64]	; 0x40
 80031ea:	4613      	mov	r3, r2
 80031ec:	eb42 0303 	adc.w	r3, r2, r3
 80031f0:	647b      	str	r3, [r7, #68]	; 0x44
 80031f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031fa:	f7fd f8b5 	bl	8000368 <__aeabi_uldivmod>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4611      	mov	r1, r2
 8003204:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <UART_SetConfig+0x2d4>)
 8003206:	fba3 2301 	umull	r2, r3, r3, r1
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	2264      	movs	r2, #100	; 0x64
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	1acb      	subs	r3, r1, r3
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800321a:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <UART_SetConfig+0x2d4>)
 800321c:	fba3 2302 	umull	r2, r3, r3, r2
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003228:	441c      	add	r4, r3
 800322a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800322e:	2200      	movs	r2, #0
 8003230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003234:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003238:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800323c:	4642      	mov	r2, r8
 800323e:	464b      	mov	r3, r9
 8003240:	1891      	adds	r1, r2, r2
 8003242:	63b9      	str	r1, [r7, #56]	; 0x38
 8003244:	415b      	adcs	r3, r3
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003248:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800324c:	4641      	mov	r1, r8
 800324e:	1851      	adds	r1, r2, r1
 8003250:	6339      	str	r1, [r7, #48]	; 0x30
 8003252:	4649      	mov	r1, r9
 8003254:	414b      	adcs	r3, r1
 8003256:	637b      	str	r3, [r7, #52]	; 0x34
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003264:	4659      	mov	r1, fp
 8003266:	00cb      	lsls	r3, r1, #3
 8003268:	4651      	mov	r1, sl
 800326a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800326e:	4651      	mov	r1, sl
 8003270:	00ca      	lsls	r2, r1, #3
 8003272:	4610      	mov	r0, r2
 8003274:	4619      	mov	r1, r3
 8003276:	4603      	mov	r3, r0
 8003278:	4642      	mov	r2, r8
 800327a:	189b      	adds	r3, r3, r2
 800327c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003280:	464b      	mov	r3, r9
 8003282:	460a      	mov	r2, r1
 8003284:	eb42 0303 	adc.w	r3, r2, r3
 8003288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003298:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800329c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032a0:	460b      	mov	r3, r1
 80032a2:	18db      	adds	r3, r3, r3
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a6:	4613      	mov	r3, r2
 80032a8:	eb42 0303 	adc.w	r3, r2, r3
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032b6:	f7fd f857 	bl	8000368 <__aeabi_uldivmod>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <UART_SetConfig+0x2d4>)
 80032c0:	fba3 1302 	umull	r1, r3, r3, r2
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	2164      	movs	r1, #100	; 0x64
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	3332      	adds	r3, #50	; 0x32
 80032d2:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <UART_SetConfig+0x2d4>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	f003 0207 	and.w	r2, r3, #7
 80032de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4422      	add	r2, r4
 80032e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032e8:	e105      	b.n	80034f6 <UART_SetConfig+0x4d6>
 80032ea:	bf00      	nop
 80032ec:	40011000 	.word	0x40011000
 80032f0:	40011400 	.word	0x40011400
 80032f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003302:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003306:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800330a:	4642      	mov	r2, r8
 800330c:	464b      	mov	r3, r9
 800330e:	1891      	adds	r1, r2, r2
 8003310:	6239      	str	r1, [r7, #32]
 8003312:	415b      	adcs	r3, r3
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
 8003316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800331a:	4641      	mov	r1, r8
 800331c:	1854      	adds	r4, r2, r1
 800331e:	4649      	mov	r1, r9
 8003320:	eb43 0501 	adc.w	r5, r3, r1
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	00eb      	lsls	r3, r5, #3
 800332e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003332:	00e2      	lsls	r2, r4, #3
 8003334:	4614      	mov	r4, r2
 8003336:	461d      	mov	r5, r3
 8003338:	4643      	mov	r3, r8
 800333a:	18e3      	adds	r3, r4, r3
 800333c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003340:	464b      	mov	r3, r9
 8003342:	eb45 0303 	adc.w	r3, r5, r3
 8003346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800334a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003356:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003366:	4629      	mov	r1, r5
 8003368:	008b      	lsls	r3, r1, #2
 800336a:	4621      	mov	r1, r4
 800336c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003370:	4621      	mov	r1, r4
 8003372:	008a      	lsls	r2, r1, #2
 8003374:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003378:	f7fc fff6 	bl	8000368 <__aeabi_uldivmod>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4b60      	ldr	r3, [pc, #384]	; (8003504 <UART_SetConfig+0x4e4>)
 8003382:	fba3 2302 	umull	r2, r3, r3, r2
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	011c      	lsls	r4, r3, #4
 800338a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800338e:	2200      	movs	r2, #0
 8003390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003394:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003398:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800339c:	4642      	mov	r2, r8
 800339e:	464b      	mov	r3, r9
 80033a0:	1891      	adds	r1, r2, r2
 80033a2:	61b9      	str	r1, [r7, #24]
 80033a4:	415b      	adcs	r3, r3
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033ac:	4641      	mov	r1, r8
 80033ae:	1851      	adds	r1, r2, r1
 80033b0:	6139      	str	r1, [r7, #16]
 80033b2:	4649      	mov	r1, r9
 80033b4:	414b      	adcs	r3, r1
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033c4:	4659      	mov	r1, fp
 80033c6:	00cb      	lsls	r3, r1, #3
 80033c8:	4651      	mov	r1, sl
 80033ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ce:	4651      	mov	r1, sl
 80033d0:	00ca      	lsls	r2, r1, #3
 80033d2:	4610      	mov	r0, r2
 80033d4:	4619      	mov	r1, r3
 80033d6:	4603      	mov	r3, r0
 80033d8:	4642      	mov	r2, r8
 80033da:	189b      	adds	r3, r3, r2
 80033dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033e0:	464b      	mov	r3, r9
 80033e2:	460a      	mov	r2, r1
 80033e4:	eb42 0303 	adc.w	r3, r2, r3
 80033e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80033f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003404:	4649      	mov	r1, r9
 8003406:	008b      	lsls	r3, r1, #2
 8003408:	4641      	mov	r1, r8
 800340a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800340e:	4641      	mov	r1, r8
 8003410:	008a      	lsls	r2, r1, #2
 8003412:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003416:	f7fc ffa7 	bl	8000368 <__aeabi_uldivmod>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4b39      	ldr	r3, [pc, #228]	; (8003504 <UART_SetConfig+0x4e4>)
 8003420:	fba3 1302 	umull	r1, r3, r3, r2
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	2164      	movs	r1, #100	; 0x64
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	3332      	adds	r3, #50	; 0x32
 8003432:	4a34      	ldr	r2, [pc, #208]	; (8003504 <UART_SetConfig+0x4e4>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800343e:	441c      	add	r4, r3
 8003440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003444:	2200      	movs	r2, #0
 8003446:	673b      	str	r3, [r7, #112]	; 0x70
 8003448:	677a      	str	r2, [r7, #116]	; 0x74
 800344a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800344e:	4642      	mov	r2, r8
 8003450:	464b      	mov	r3, r9
 8003452:	1891      	adds	r1, r2, r2
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	415b      	adcs	r3, r3
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800345e:	4641      	mov	r1, r8
 8003460:	1851      	adds	r1, r2, r1
 8003462:	6039      	str	r1, [r7, #0]
 8003464:	4649      	mov	r1, r9
 8003466:	414b      	adcs	r3, r1
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003476:	4659      	mov	r1, fp
 8003478:	00cb      	lsls	r3, r1, #3
 800347a:	4651      	mov	r1, sl
 800347c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003480:	4651      	mov	r1, sl
 8003482:	00ca      	lsls	r2, r1, #3
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	4603      	mov	r3, r0
 800348a:	4642      	mov	r2, r8
 800348c:	189b      	adds	r3, r3, r2
 800348e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003490:	464b      	mov	r3, r9
 8003492:	460a      	mov	r2, r1
 8003494:	eb42 0303 	adc.w	r3, r2, r3
 8003498:	66fb      	str	r3, [r7, #108]	; 0x6c
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	663b      	str	r3, [r7, #96]	; 0x60
 80034a4:	667a      	str	r2, [r7, #100]	; 0x64
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034b2:	4649      	mov	r1, r9
 80034b4:	008b      	lsls	r3, r1, #2
 80034b6:	4641      	mov	r1, r8
 80034b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034bc:	4641      	mov	r1, r8
 80034be:	008a      	lsls	r2, r1, #2
 80034c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034c4:	f7fc ff50 	bl	8000368 <__aeabi_uldivmod>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <UART_SetConfig+0x4e4>)
 80034ce:	fba3 1302 	umull	r1, r3, r3, r2
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2164      	movs	r1, #100	; 0x64
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	3332      	adds	r3, #50	; 0x32
 80034e0:	4a08      	ldr	r2, [pc, #32]	; (8003504 <UART_SetConfig+0x4e4>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	f003 020f 	and.w	r2, r3, #15
 80034ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4422      	add	r2, r4
 80034f4:	609a      	str	r2, [r3, #8]
}
 80034f6:	bf00      	nop
 80034f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034fc:	46bd      	mov	sp, r7
 80034fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003502:	bf00      	nop
 8003504:	51eb851f 	.word	0x51eb851f

08003508 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003508:	b084      	sub	sp, #16
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	f107 001c 	add.w	r0, r7, #28
 8003516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	2b01      	cmp	r3, #1
 800351e:	d122      	bne.n	8003566 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800354a:	2b01      	cmp	r3, #1
 800354c:	d105      	bne.n	800355a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 faa2 	bl	8003aa4 <USB_CoreReset>
 8003560:	4603      	mov	r3, r0
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	e01a      	b.n	800359c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fa96 	bl	8003aa4 <USB_CoreReset>
 8003578:	4603      	mov	r3, r0
 800357a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800357c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	639a      	str	r2, [r3, #56]	; 0x38
 800358e:	e005      	b.n	800359c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d10b      	bne.n	80035ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f043 0206 	orr.w	r2, r3, #6
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f043 0220 	orr.w	r2, r3, #32
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035c6:	b004      	add	sp, #16
 80035c8:	4770      	bx	lr

080035ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f023 0201 	bic.w	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d115      	bne.n	800363a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800361a:	2001      	movs	r0, #1
 800361c:	f7fe f906 	bl	800182c <HAL_Delay>
      ms++;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	3301      	adds	r3, #1
 8003624:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa2e 	bl	8003a88 <USB_GetMode>
 800362c:	4603      	mov	r3, r0
 800362e:	2b01      	cmp	r3, #1
 8003630:	d01e      	beq.n	8003670 <USB_SetCurrentMode+0x84>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b31      	cmp	r3, #49	; 0x31
 8003636:	d9f0      	bls.n	800361a <USB_SetCurrentMode+0x2e>
 8003638:	e01a      	b.n	8003670 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d115      	bne.n	800366c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800364c:	2001      	movs	r0, #1
 800364e:	f7fe f8ed 	bl	800182c <HAL_Delay>
      ms++;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3301      	adds	r3, #1
 8003656:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fa15 	bl	8003a88 <USB_GetMode>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <USB_SetCurrentMode+0x84>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b31      	cmp	r3, #49	; 0x31
 8003668:	d9f0      	bls.n	800364c <USB_SetCurrentMode+0x60>
 800366a:	e001      	b.n	8003670 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e005      	b.n	800367c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b32      	cmp	r3, #50	; 0x32
 8003674:	d101      	bne.n	800367a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003684:	b084      	sub	sp, #16
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800369e:	2300      	movs	r3, #0
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	e009      	b.n	80036b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	3340      	adds	r3, #64	; 0x40
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	2200      	movs	r2, #0
 80036b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	3301      	adds	r3, #1
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b0e      	cmp	r3, #14
 80036bc:	d9f2      	bls.n	80036a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d11c      	bne.n	80036fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d2:	f043 0302 	orr.w	r3, r3, #2
 80036d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	639a      	str	r2, [r3, #56]	; 0x38
 80036fc:	e00b      	b.n	8003716 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800371c:	461a      	mov	r2, r3
 800371e:	2300      	movs	r3, #0
 8003720:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003728:	4619      	mov	r1, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003730:	461a      	mov	r2, r3
 8003732:	680b      	ldr	r3, [r1, #0]
 8003734:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003738:	2b01      	cmp	r3, #1
 800373a:	d10c      	bne.n	8003756 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800373c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d104      	bne.n	800374c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003742:	2100      	movs	r1, #0
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f965 	bl	8003a14 <USB_SetDevSpeed>
 800374a:	e008      	b.n	800375e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800374c:	2101      	movs	r1, #1
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f960 	bl	8003a14 <USB_SetDevSpeed>
 8003754:	e003      	b.n	800375e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003756:	2103      	movs	r1, #3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f95b 	bl	8003a14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800375e:	2110      	movs	r1, #16
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f8f3 	bl	800394c <USB_FlushTxFifo>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f91f 	bl	80039b4 <USB_FlushRxFifo>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003786:	461a      	mov	r2, r3
 8003788:	2300      	movs	r3, #0
 800378a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003792:	461a      	mov	r2, r3
 8003794:	2300      	movs	r3, #0
 8003796:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379e:	461a      	mov	r2, r3
 80037a0:	2300      	movs	r3, #0
 80037a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037a4:	2300      	movs	r3, #0
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	e043      	b.n	8003832 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037c0:	d118      	bne.n	80037f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d4:	461a      	mov	r2, r3
 80037d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	e013      	b.n	8003806 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ea:	461a      	mov	r2, r3
 80037ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e008      	b.n	8003806 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003800:	461a      	mov	r2, r3
 8003802:	2300      	movs	r3, #0
 8003804:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003812:	461a      	mov	r2, r3
 8003814:	2300      	movs	r3, #0
 8003816:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003824:	461a      	mov	r2, r3
 8003826:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800382a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	3301      	adds	r3, #1
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	429a      	cmp	r2, r3
 8003838:	d3b7      	bcc.n	80037aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	e043      	b.n	80038c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003856:	d118      	bne.n	800388a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386a:	461a      	mov	r2, r3
 800386c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e013      	b.n	800389c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003880:	461a      	mov	r2, r3
 8003882:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	e008      	b.n	800389c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003896:	461a      	mov	r2, r3
 8003898:	2300      	movs	r3, #0
 800389a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a8:	461a      	mov	r2, r3
 80038aa:	2300      	movs	r3, #0
 80038ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ba:	461a      	mov	r2, r3
 80038bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	3301      	adds	r3, #1
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d3b7      	bcc.n	8003840 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d105      	bne.n	8003904 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f043 0210 	orr.w	r2, r3, #16
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699a      	ldr	r2, [r3, #24]
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <USB_DevInit+0x2c4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f043 0208 	orr.w	r2, r3, #8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003924:	2b01      	cmp	r3, #1
 8003926:	d107      	bne.n	8003938 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003930:	f043 0304 	orr.w	r3, r3, #4
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003938:	7dfb      	ldrb	r3, [r7, #23]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003944:	b004      	add	sp, #16
 8003946:	4770      	bx	lr
 8003948:	803c3800 	.word	0x803c3800

0800394c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3301      	adds	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4a13      	ldr	r2, [pc, #76]	; (80039b0 <USB_FlushTxFifo+0x64>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d901      	bls.n	800396c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e01b      	b.n	80039a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	daf2      	bge.n	800395a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	019b      	lsls	r3, r3, #6
 800397c:	f043 0220 	orr.w	r2, r3, #32
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3301      	adds	r3, #1
 8003988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <USB_FlushTxFifo+0x64>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e006      	b.n	80039a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d0f0      	beq.n	8003984 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	00030d40 	.word	0x00030d40

080039b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	3301      	adds	r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <USB_FlushRxFifo+0x5c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e018      	b.n	8003a04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	daf2      	bge.n	80039c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2210      	movs	r2, #16
 80039e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3301      	adds	r3, #1
 80039e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <USB_FlushRxFifo+0x5c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e006      	b.n	8003a04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b10      	cmp	r3, #16
 8003a00:	d0f0      	beq.n	80039e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	00030d40 	.word	0x00030d40

08003a14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	68f9      	ldr	r1, [r7, #12]
 8003a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003a60:	f023 0303 	bic.w	r3, r3, #3
 8003a64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0301 	and.w	r3, r3, #1
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a13      	ldr	r2, [pc, #76]	; (8003b08 <USB_CoreReset+0x64>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e01b      	b.n	8003afa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	daf2      	bge.n	8003ab0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3301      	adds	r3, #1
 8003ade:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4a09      	ldr	r2, [pc, #36]	; (8003b08 <USB_CoreReset+0x64>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d901      	bls.n	8003aec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e006      	b.n	8003afa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d0f0      	beq.n	8003ada <USB_CoreReset+0x36>

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	00030d40 	.word	0x00030d40

08003b0c <__libc_init_array>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	4d0d      	ldr	r5, [pc, #52]	; (8003b44 <__libc_init_array+0x38>)
 8003b10:	4c0d      	ldr	r4, [pc, #52]	; (8003b48 <__libc_init_array+0x3c>)
 8003b12:	1b64      	subs	r4, r4, r5
 8003b14:	10a4      	asrs	r4, r4, #2
 8003b16:	2600      	movs	r6, #0
 8003b18:	42a6      	cmp	r6, r4
 8003b1a:	d109      	bne.n	8003b30 <__libc_init_array+0x24>
 8003b1c:	4d0b      	ldr	r5, [pc, #44]	; (8003b4c <__libc_init_array+0x40>)
 8003b1e:	4c0c      	ldr	r4, [pc, #48]	; (8003b50 <__libc_init_array+0x44>)
 8003b20:	f000 f82e 	bl	8003b80 <_init>
 8003b24:	1b64      	subs	r4, r4, r5
 8003b26:	10a4      	asrs	r4, r4, #2
 8003b28:	2600      	movs	r6, #0
 8003b2a:	42a6      	cmp	r6, r4
 8003b2c:	d105      	bne.n	8003b3a <__libc_init_array+0x2e>
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b34:	4798      	blx	r3
 8003b36:	3601      	adds	r6, #1
 8003b38:	e7ee      	b.n	8003b18 <__libc_init_array+0xc>
 8003b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3e:	4798      	blx	r3
 8003b40:	3601      	adds	r6, #1
 8003b42:	e7f2      	b.n	8003b2a <__libc_init_array+0x1e>
 8003b44:	08003cb8 	.word	0x08003cb8
 8003b48:	08003cb8 	.word	0x08003cb8
 8003b4c:	08003cb8 	.word	0x08003cb8
 8003b50:	08003cbc 	.word	0x08003cbc

08003b54 <memcpy>:
 8003b54:	440a      	add	r2, r1
 8003b56:	4291      	cmp	r1, r2
 8003b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b5c:	d100      	bne.n	8003b60 <memcpy+0xc>
 8003b5e:	4770      	bx	lr
 8003b60:	b510      	push	{r4, lr}
 8003b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b6a:	4291      	cmp	r1, r2
 8003b6c:	d1f9      	bne.n	8003b62 <memcpy+0xe>
 8003b6e:	bd10      	pop	{r4, pc}

08003b70 <memset>:
 8003b70:	4402      	add	r2, r0
 8003b72:	4603      	mov	r3, r0
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d100      	bne.n	8003b7a <memset+0xa>
 8003b78:	4770      	bx	lr
 8003b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7e:	e7f9      	b.n	8003b74 <memset+0x4>

08003b80 <_init>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr

08003b8c <_fini>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr
